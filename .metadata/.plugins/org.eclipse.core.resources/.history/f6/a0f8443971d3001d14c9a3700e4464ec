#include "stm32f4xx_hal.h"

CAN_HandleTypeDef hcan2;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN2_Init(void);

void Error_Handler(void);

CAN_RxHeaderTypeDef rxHeader; //CAN Bus Transmit Header
CAN_TxHeaderTypeDef txHeader; //CAN Bus Receive Header
uint8_t canRX[8] = {0,0,0,0,0,0,0,0};  //CAN Bus Receive Buffer
CAN_FilterTypeDef canfil; //CAN Bus Filter
uint32_t canMailbox; //CAN Bus Mail box variable

uint8_t check = 0;

#define YELLOW_LED                             GPIO_PIN_13
#define YELLOW_GPIO_PORT                       GPIOC
#define RED_LED                                GPIO_PIN_14
#define RED_GPIO_PORT                          GPIOC
#define BLUE_LED                               GPIO_PIN_15
#define BLUE_GPIO_PORT                         GPIOB


int main(void)
{
  HAL_Init();

  SystemClock_Config();

  MX_GPIO_Init();
  MX_CAN2_Init();

  canfil.FilterBank = 0;
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
  canfil.FilterFIFOAssignment = CAN_RX_FIFO1;
  canfil.FilterIdHigh = 0;
  canfil.FilterIdLow = 0;
  canfil.FilterMaskIdHigh = 0;
  canfil.FilterMaskIdLow = 0;
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
  canfil.FilterActivation = ENABLE;
  canfil.SlaveStartFilterBank = 14;

//  canfil.FilterActivation = CAN_FILTER_ENABLE;
//  canfil.FilterBank = 18;  // which filter bank to use from the assigned ones
//  canfil.FilterFIFOAssignment = CAN_FILTER_FIFO0;
//  canfil.FilterIdHigh = 0x446<<5;
//  canfil.FilterIdLow = 0;
//  canfil.FilterMaskIdHigh = 0x446<<5;
//  canfil.FilterMaskIdLow = 0x0000;
//  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
//  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
//  canfil.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)


  txHeader.DLC = 8; // Number of bytes to be transmitted max- 8
  txHeader.IDE = CAN_ID_STD;
  txHeader.RTR = CAN_RTR_DATA;
  txHeader.StdId = 0x030;
  txHeader.ExtId = 0x02;
  txHeader.TransmitGlobalTime = DISABLE;

  if (HAL_CAN_ConfigFilter(&hcan2,&canfil) != HAL_OK) //Initialize CAN Filter
  {
	  Error_Handler();
  }
  if (HAL_CAN_Start(&hcan2) != HAL_OK) //Initialize CAN Bus
  {
  	  Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)// Initialize CAN Bus Rx Interrupt
  {
  	  Error_Handler();
  }

  while (1)
  {
//	 uint8_t csend[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}; // Tx Buffer
//     HAL_CAN_AddTxMessage(&hcan2,&txHeader,csend,&canMailbox); // Send Message

	 if (check)
	 {
		 HAL_GPIO_TogglePin(YELLOW_GPIO_PORT, YELLOW_LED);
	 }

     HAL_GPIO_TogglePin(BLUE_GPIO_PORT, BLUE_LED);
     HAL_Delay(1000);
  }

}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2)
{
	if (HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &rxHeader, canRX) != HAL_OK) //Receive CAN bus message to canRX buffer
	{
		Error_Handler();
	}
	check = 1;
//	HAL_GPIO_TogglePin(YELLOW_GPIO_PORT, YELLOW_LED);// toggle LED
//	HAL_GPIO_WritePin(YELLOW_GPIO_PORT, YELLOW_LED, GPIO_PIN_SET);

}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 80;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

static void MX_CAN2_Init(void)
{
  hcan2.Instance = CAN2;
  hcan2.Init.Prescaler = 10;
  hcan2.Init.Mode = CAN_MODE_NORMAL;
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
  hcan2.Init.TimeTriggeredMode = DISABLE;
  hcan2.Init.AutoBusOff = DISABLE;
  hcan2.Init.AutoWakeUp = DISABLE;
  hcan2.Init.AutoRetransmission = DISABLE;
  hcan2.Init.ReceiveFifoLocked = DISABLE;
  hcan2.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
  {
    Error_Handler();
  }
}

static void MX_GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  GPIO_InitTypeDef GPIO_InitStruct_BLUE;
  GPIO_InitStruct_BLUE.Pin = BLUE_LED;
  GPIO_InitStruct_BLUE.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct_BLUE.Pull = GPIO_PULLUP;
  GPIO_InitStruct_BLUE.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(BLUE_GPIO_PORT, &GPIO_InitStruct_BLUE);

  GPIO_InitTypeDef GPIO_InitStruct_YELLOW;
  GPIO_InitStruct_YELLOW.Pin = YELLOW_LED;
  GPIO_InitStruct_YELLOW.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct_YELLOW.Pull = GPIO_PULLUP;
  GPIO_InitStruct_YELLOW.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(YELLOW_GPIO_PORT, &GPIO_InitStruct_YELLOW);

  GPIO_InitTypeDef GPIO_InitStruct_RED;
  GPIO_InitStruct_RED.Pin = RED_LED;
  GPIO_InitStruct_RED.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct_RED.Pull = GPIO_PULLUP;
  GPIO_InitStruct_RED.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(RED_GPIO_PORT, &GPIO_InitStruct_RED);
}

//void SysTick_Handler(void) {
//  HAL_IncTick();
//}

void Error_Handler(void)
{
  __disable_irq();
  HAL_GPIO_WritePin(RED_GPIO_PORT, RED_LED, GPIO_PIN_SET);
  while (1)
  {
  }
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
