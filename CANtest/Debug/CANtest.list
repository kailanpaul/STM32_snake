
CANtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ddc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc4  08007fc4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fcc  08007fcc  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001cc0  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001dbc  20001dbc  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010222  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c4f  00000000  00000000  0003034e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00032fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b50  00000000  00000000  00033c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002153f  00000000  00000000  00034788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010072  00000000  00000000  00055cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbb65  00000000  00000000  00065d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012189e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032d4  00000000  00000000  001218f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f4c 	.word	0x08007f4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08007f4c 	.word	0x08007f4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
#define BLUE_LED                               GPIO_PIN_15
#define BLUE_GPIO_PORT                         GPIOB


int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	HAL_Init();
 80004d2:	f000 faf7 	bl	8000ac4 <HAL_Init>

	SystemClock_Config();
 80004d6:	f000 f8bd 	bl	8000654 <SystemClock_Config>

	MX_GPIO_Init();
 80004da:	f000 f96f 	bl	80007bc <MX_GPIO_Init>
	MX_CAN1_Init();
 80004de:	f000 f937 	bl	8000750 <MX_CAN1_Init>
	MX_USB_DEVICE_Init();
 80004e2:	f006 ffc9 	bl	8007478 <MX_USB_DEVICE_Init>

	canfil.FilterBank = 0;
 80004e6:	4b3e      	ldr	r3, [pc, #248]	; (80005e0 <main+0x114>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	615a      	str	r2, [r3, #20]
	canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80004ec:	4b3c      	ldr	r3, [pc, #240]	; (80005e0 <main+0x114>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	619a      	str	r2, [r3, #24]
	canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004f2:	4b3b      	ldr	r3, [pc, #236]	; (80005e0 <main+0x114>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
	canfil.FilterIdHigh = 0;
 80004f8:	4b39      	ldr	r3, [pc, #228]	; (80005e0 <main+0x114>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
	canfil.FilterIdLow = 0;
 80004fe:	4b38      	ldr	r3, [pc, #224]	; (80005e0 <main+0x114>)
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
	canfil.FilterMaskIdHigh = 0;
 8000504:	4b36      	ldr	r3, [pc, #216]	; (80005e0 <main+0x114>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
	canfil.FilterMaskIdLow = 0;
 800050a:	4b35      	ldr	r3, [pc, #212]	; (80005e0 <main+0x114>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
	canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8000510:	4b33      	ldr	r3, [pc, #204]	; (80005e0 <main+0x114>)
 8000512:	2201      	movs	r2, #1
 8000514:	61da      	str	r2, [r3, #28]
	canfil.FilterActivation = ENABLE;
 8000516:	4b32      	ldr	r3, [pc, #200]	; (80005e0 <main+0x114>)
 8000518:	2201      	movs	r2, #1
 800051a:	621a      	str	r2, [r3, #32]
	canfil.SlaveStartFilterBank = 0;
 800051c:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <main+0x114>)
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24

	txHeader.DLC = 8; // Number of bytes to be transmitted max- 8
 8000522:	4b30      	ldr	r3, [pc, #192]	; (80005e4 <main+0x118>)
 8000524:	2208      	movs	r2, #8
 8000526:	611a      	str	r2, [r3, #16]
	txHeader.IDE = CAN_ID_STD;
 8000528:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <main+0x118>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800052e:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <main+0x118>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
	txHeader.StdId = 0x030;
 8000534:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <main+0x118>)
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	601a      	str	r2, [r3, #0]
	txHeader.ExtId = 0x02;
 800053a:	4b2a      	ldr	r3, [pc, #168]	; (80005e4 <main+0x118>)
 800053c:	2202      	movs	r2, #2
 800053e:	605a      	str	r2, [r3, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <main+0x118>)
 8000542:	2200      	movs	r2, #0
 8000544:	751a      	strb	r2, [r3, #20]

	if (HAL_CAN_ConfigFilter(&hcan1,&canfil) != HAL_OK) //Initialize CAN Filter
 8000546:	4926      	ldr	r1, [pc, #152]	; (80005e0 <main+0x114>)
 8000548:	4827      	ldr	r0, [pc, #156]	; (80005e8 <main+0x11c>)
 800054a:	f000 fc4d 	bl	8000de8 <HAL_CAN_ConfigFilter>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <main+0x8c>
	{
		Error_Handler();
 8000554:	f000 f9a4 	bl	80008a0 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan1) != HAL_OK) //Initialize CAN Bus
 8000558:	4823      	ldr	r0, [pc, #140]	; (80005e8 <main+0x11c>)
 800055a:	f000 fd25 	bl	8000fa8 <HAL_CAN_Start>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <main+0x9c>
	{
		Error_Handler();
 8000564:	f000 f99c 	bl	80008a0 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)// Initialize CAN Bus Rx Interrupt
 8000568:	2102      	movs	r1, #2
 800056a:	481f      	ldr	r0, [pc, #124]	; (80005e8 <main+0x11c>)
 800056c:	f000 ff4d 	bl	800140a <HAL_CAN_ActivateNotification>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <main+0xae>
	{
		Error_Handler();
 8000576:	f000 f993 	bl	80008a0 <Error_Handler>
//		while (CDC_Transmit_FS(usb_out, len) != USBD_OK);
////			}
//			while (CDC_Transmit_FS(canRX, sizeof(canRX)/sizeof(canRX[0])) != USBD_OK);
//			check = 0;
//		}
		if(usb_in[0] == 'x')
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <main+0x120>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b78      	cmp	r3, #120	; 0x78
 8000580:	d124      	bne.n	80005cc <main+0x100>
		{
			HAL_GPIO_WritePin(YELLOW_GPIO_PORT, YELLOW_LED, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000588:	4819      	ldr	r0, [pc, #100]	; (80005f0 <main+0x124>)
 800058a:	f001 fc41 	bl	8001e10 <HAL_GPIO_WritePin>
			uint8_t csend[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}; // Tx Buffer
 800058e:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <main+0x128>)
 8000590:	463b      	mov	r3, r7
 8000592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000596:	e883 0003 	stmia.w	r3, {r0, r1}
			if (HAL_CAN_AddTxMessage(&hcan1,&txHeader,csend,&canMailbox) != HAL_OK) // Send Message
 800059a:	463a      	mov	r2, r7
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <main+0x12c>)
 800059e:	4911      	ldr	r1, [pc, #68]	; (80005e4 <main+0x118>)
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <main+0x11c>)
 80005a2:	f000 fd45 	bl	8001030 <HAL_CAN_AddTxMessage>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <main+0xe4>
			{
				Error_Handler();
 80005ac:	f000 f978 	bl	80008a0 <Error_Handler>
			}
			HAL_Delay(10);
 80005b0:	200a      	movs	r0, #10
 80005b2:	f000 faf9 	bl	8000ba8 <HAL_Delay>
			HAL_GPIO_WritePin(YELLOW_GPIO_PORT, YELLOW_LED, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <main+0x124>)
 80005be:	f001 fc27 	bl	8001e10 <HAL_GPIO_WritePin>
			memset(usb_in, '\0', 64); // clear buffer
 80005c2:	2240      	movs	r2, #64	; 0x40
 80005c4:	2100      	movs	r1, #0
 80005c6:	4809      	ldr	r0, [pc, #36]	; (80005ec <main+0x120>)
 80005c8:	f007 fcb8 	bl	8007f3c <memset>
		}

		HAL_GPIO_TogglePin(BLUE_GPIO_PORT, BLUE_LED);
 80005cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <main+0x130>)
 80005d2:	f001 fc36 	bl	8001e42 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80005d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005da:	f000 fae5 	bl	8000ba8 <HAL_Delay>
		if(usb_in[0] == 'x')
 80005de:	e7cc      	b.n	800057a <main+0xae>
 80005e0:	2000017c 	.word	0x2000017c
 80005e4:	2000015c 	.word	0x2000015c
 80005e8:	20000118 	.word	0x20000118
 80005ec:	200001a8 	.word	0x200001a8
 80005f0:	40020800 	.word	0x40020800
 80005f4:	08007f64 	.word	0x08007f64
 80005f8:	200001a4 	.word	0x200001a4
 80005fc:	40020400 	.word	0x40020400

08000600 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK) //Receive CAN bus message to canRX buffer
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800060a:	4a11      	ldr	r2, [pc, #68]	; (8000650 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800060c:	2100      	movs	r1, #0
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 fde9 	bl	80011e6 <HAL_CAN_GetRxMessage>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 800061a:	f000 f941 	bl	80008a0 <Error_Handler>
//	while (CDC_Transmit_FS("ID: ", 4) != USBD_OK);
//	while (CDC_Transmit_FS(rxHeader.StdId, 1) != USBD_OK);
//	while (CDC_Transmit_FS("| ", 2) != USBD_OK);
//	while (CDC_Transmit_FS(canRX, sizeof(canRX)/sizeof(canRX[0])) != USBD_OK);
//	char buf[8];
	if (rxHeader.StdId > 9)
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b09      	cmp	r3, #9
 8000624:	d905      	bls.n	8000632 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
	{
		rxHeader.StdId += 55;
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	3337      	adds	r3, #55	; 0x37
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	e004      	b.n	800063c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
	} else {
		rxHeader.StdId += 48;
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3330      	adds	r3, #48	; 0x30
 8000638:	4a05      	ldr	r2, [pc, #20]	; (8000650 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800063a:	6013      	str	r3, [r2, #0]
//	char val[] = " ";
//	val[0] = (char) rxHeader.StdId;
//	strcat(buf, val);
//	CDC_Transmit_FS((uint8_t*)buf, 8);
//	rxHeader.StdId += 48;
	CDC_Transmit_FS((uint8_t*)&rxHeader.StdId, 1);
 800063c:	2101      	movs	r1, #1
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000640:	f006 ffee 	bl	8007620 <CDC_Transmit_FS>
//	CDC_Transmit_FS("1", 1);
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000174 	.word	0x20000174
 8000650:	20000140 	.word	0x20000140

08000654 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f007 fc6a 	bl	8007f3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b32      	ldr	r3, [pc, #200]	; (8000748 <SystemClock_Config+0xf4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a31      	ldr	r2, [pc, #196]	; (8000748 <SystemClock_Config+0xf4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <SystemClock_Config+0xf4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b2c      	ldr	r3, [pc, #176]	; (800074c <SystemClock_Config+0xf8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2b      	ldr	r2, [pc, #172]	; (800074c <SystemClock_Config+0xf8>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b29      	ldr	r3, [pc, #164]	; (800074c <SystemClock_Config+0xf8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80006c8:	2348      	movs	r3, #72	; 0x48
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80006d0:	2303      	movs	r3, #3
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fe49 	bl	8003370 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80006e4:	f000 f8dc 	bl	80008a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2102      	movs	r1, #2
 8000704:	4618      	mov	r0, r3
 8000706:	f003 f8ab 	bl	8003860 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000710:	f000 f8c6 	bl	80008a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000724:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2102      	movs	r1, #2
 8000730:	4618      	mov	r0, r3
 8000732:	f003 f895 	bl	8003860 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xec>
	{
		Error_Handler();
 800073c:	f000 f8b0 	bl	80008a0 <Error_Handler>
	}
}
 8000740:	bf00      	nop
 8000742:	3750      	adds	r7, #80	; 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_CAN1_Init>:

static void MX_CAN1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_CAN1_Init+0x64>)
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <MX_CAN1_Init+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 9;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_CAN1_Init+0x64>)
 800075c:	2209      	movs	r2, #9
 800075e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_CAN1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_CAN1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_CAN1_Init+0x64>)
 800076e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000772:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_CAN1_Init+0x64>)
 8000776:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800077a:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_CAN1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_CAN1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_CAN1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_CAN1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_CAN1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_CAN1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_CAN1_Init+0x64>)
 80007a2:	f000 fa25 	bl	8000bf0 <HAL_CAN_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 80007ac:	f000 f878 	bl	80008a0 <Error_Handler>
	}
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000118 	.word	0x20000118
 80007b8:	40006400 	.word	0x40006400

080007bc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b094      	sub	sp, #80	; 0x50
 80007c0:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b33      	ldr	r3, [pc, #204]	; (8000894 <MX_GPIO_Init+0xd8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a32      	ldr	r2, [pc, #200]	; (8000894 <MX_GPIO_Init+0xd8>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <MX_GPIO_Init+0xd8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <MX_GPIO_Init+0xd8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a2b      	ldr	r2, [pc, #172]	; (8000894 <MX_GPIO_Init+0xd8>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_GPIO_Init+0xd8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <MX_GPIO_Init+0xd8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a24      	ldr	r2, [pc, #144]	; (8000894 <MX_GPIO_Init+0xd8>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <MX_GPIO_Init+0xd8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_GPIO_Init+0xd8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <MX_GPIO_Init+0xd8>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_GPIO_Init+0xd8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct_BLUE;
	GPIO_InitStruct_BLUE.Pin = BLUE_LED;
 8000832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct_BLUE.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_InitStruct_BLUE.Pull = GPIO_PULLUP;
 800083c:	2301      	movs	r3, #1
 800083e:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_InitStruct_BLUE.Speed = GPIO_SPEED_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_GPIO_Init(BLUE_GPIO_PORT, &GPIO_InitStruct_BLUE);
 8000844:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000848:	4619      	mov	r1, r3
 800084a:	4813      	ldr	r0, [pc, #76]	; (8000898 <MX_GPIO_Init+0xdc>)
 800084c:	f001 f944 	bl	8001ad8 <HAL_GPIO_Init>

	GPIO_InitTypeDef GPIO_InitStruct_YELLOW;
	GPIO_InitStruct_YELLOW.Pin = YELLOW_LED;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct_YELLOW.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct_YELLOW.Pull = GPIO_PULLUP;
 800085a:	2301      	movs	r3, #1
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct_YELLOW.Speed = GPIO_SPEED_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(YELLOW_GPIO_PORT, &GPIO_InitStruct_YELLOW);
 8000862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000866:	4619      	mov	r1, r3
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <MX_GPIO_Init+0xe0>)
 800086a:	f001 f935 	bl	8001ad8 <HAL_GPIO_Init>

	GPIO_InitTypeDef GPIO_InitStruct_RED;
	GPIO_InitStruct_RED.Pin = RED_LED;
 800086e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000872:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct_RED.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct_RED.Pull = GPIO_PULLUP;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct_RED.Speed = GPIO_SPEED_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RED_GPIO_PORT, &GPIO_InitStruct_RED);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_GPIO_Init+0xe0>)
 8000888:	f001 f926 	bl	8001ad8 <HAL_GPIO_Init>
}
 800088c:	bf00      	nop
 800088e:	3750      	adds	r7, #80	; 0x50
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40020400 	.word	0x40020400
 800089c:	40020800 	.word	0x40020800

080008a0 <Error_Handler>:
//void SysTick_Handler(void) {
//  HAL_IncTick();
//}

void Error_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
	__disable_irq();
	HAL_GPIO_WritePin(RED_GPIO_PORT, RED_LED, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ae:	4802      	ldr	r0, [pc, #8]	; (80008b8 <Error_Handler+0x18>)
 80008b0:	f001 faae 	bl	8001e10 <HAL_GPIO_WritePin>
	while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x14>
 80008b6:	bf00      	nop
 80008b8:	40020800 	.word	0x40020800

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_MspInit+0x4c>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x4c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a26      	ldr	r2, [pc, #152]	; (80009c4 <HAL_CAN_MspInit+0xb8>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d145      	bne.n	80009ba <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <HAL_CAN_MspInit+0xbc>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a24      	ldr	r2, [pc, #144]	; (80009c8 <HAL_CAN_MspInit+0xbc>)
 8000938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <HAL_CAN_MspInit+0xbc>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <HAL_CAN_MspInit+0xbc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <HAL_CAN_MspInit+0xbc>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <HAL_CAN_MspInit+0xbc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000970:	2301      	movs	r3, #1
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000978:	2309      	movs	r3, #9
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4812      	ldr	r0, [pc, #72]	; (80009cc <HAL_CAN_MspInit+0xc0>)
 8000984:	f001 f8a8 	bl	8001ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800099a:	2309      	movs	r3, #9
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <HAL_CAN_MspInit+0xc0>)
 80009a6:	f001 f897 	bl	8001ad8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2014      	movs	r0, #20
 80009b0:	f001 f85b 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009b4:	2014      	movs	r0, #20
 80009b6:	f001 f874 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40006400 	.word	0x40006400
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020400 	.word	0x40020400

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f8a4 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <CAN1_RX0_IRQHandler+0x10>)
 8000a2a:	f000 fd14 	bl	8001456 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000118 	.word	0x20000118

08000a38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <OTG_FS_IRQHandler+0x10>)
 8000a3e:	f001 fb6a 	bl	8002116 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20001690 	.word	0x20001690

08000a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a76:	490e      	ldr	r1, [pc, #56]	; (8000ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a8c:	4c0b      	ldr	r4, [pc, #44]	; (8000abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9a:	f7ff ffd7 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f007 fa1b 	bl	8007ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fd13 	bl	80004cc <main>
  bx  lr    
 8000aa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000ab4:	08007fd4 	.word	0x08007fd4
  ldr r2, =_sbss
 8000ab8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000abc:	20001dbc 	.word	0x20001dbc

08000ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <HAL_Init+0x40>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_Init+0x40>)
 8000ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x40>)
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 ffb1 	bl	8001a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 f808 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff fee0 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023c00 	.word	0x40023c00

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_InitTick+0x54>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 ffc9 	bl	8001abe <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 ff91 	bl	8001a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_InitTick+0x5c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	200001ac 	.word	0x200001ac

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200001ac 	.word	0x200001ac

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff ffee 	bl	8000b90 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffde 	bl	8000b90 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008

08000bf0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e0ed      	b.n	8000dde <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fe7c 	bl	800090c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0201 	orr.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c24:	f7ff ffb4 	bl	8000b90 <HAL_GetTick>
 8000c28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c2a:	e012      	b.n	8000c52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c2c:	f7ff ffb0 	bl	8000b90 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b0a      	cmp	r3, #10
 8000c38:	d90b      	bls.n	8000c52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2205      	movs	r2, #5
 8000c4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e0c5      	b.n	8000dde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0e5      	beq.n	8000c2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 0202 	bic.w	r2, r2, #2
 8000c6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c70:	f7ff ff8e 	bl	8000b90 <HAL_GetTick>
 8000c74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c76:	e012      	b.n	8000c9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c78:	f7ff ff8a 	bl	8000b90 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b0a      	cmp	r3, #10
 8000c84:	d90b      	bls.n	8000c9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2205      	movs	r2, #5
 8000c96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e09f      	b.n	8000dde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1e5      	bne.n	8000c78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7e1b      	ldrb	r3, [r3, #24]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d108      	bne.n	8000cc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	e007      	b.n	8000cd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7e5b      	ldrb	r3, [r3, #25]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d108      	bne.n	8000cf0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	e007      	b.n	8000d00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7e9b      	ldrb	r3, [r3, #26]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d108      	bne.n	8000d1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0220 	orr.w	r2, r2, #32
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	e007      	b.n	8000d2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0220 	bic.w	r2, r2, #32
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7edb      	ldrb	r3, [r3, #27]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d108      	bne.n	8000d44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0210 	bic.w	r2, r2, #16
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	e007      	b.n	8000d54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0210 	orr.w	r2, r2, #16
 8000d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7f1b      	ldrb	r3, [r3, #28]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d108      	bne.n	8000d6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 0208 	orr.w	r2, r2, #8
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e007      	b.n	8000d7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0208 	bic.w	r2, r2, #8
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7f5b      	ldrb	r3, [r3, #29]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d108      	bne.n	8000d98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f042 0204 	orr.w	r2, r2, #4
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e007      	b.n	8000da8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0204 	bic.w	r2, r2, #4
 8000da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	ea42 0103 	orr.w	r1, r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	1e5a      	subs	r2, r3, #1
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dfe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e00:	7cfb      	ldrb	r3, [r7, #19]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d003      	beq.n	8000e0e <HAL_CAN_ConfigFilter+0x26>
 8000e06:	7cfb      	ldrb	r3, [r7, #19]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	f040 80be 	bne.w	8000f8a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000e0e:	4b65      	ldr	r3, [pc, #404]	; (8000fa4 <HAL_CAN_ConfigFilter+0x1bc>)
 8000e10:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e18:	f043 0201 	orr.w	r2, r3, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	2201      	movs	r2, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	401a      	ands	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d123      	bne.n	8000eb8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3248      	adds	r2, #72	; 0x48
 8000e98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eae:	6979      	ldr	r1, [r7, #20]
 8000eb0:	3348      	adds	r3, #72	; 0x48
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	440b      	add	r3, r1
 8000eb6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d122      	bne.n	8000f06 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ee0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	3248      	adds	r2, #72	; 0x48
 8000ee6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000efa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000efc:	6979      	ldr	r1, [r7, #20]
 8000efe:	3348      	adds	r3, #72	; 0x48
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	440b      	add	r3, r1
 8000f04:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d109      	bne.n	8000f22 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	401a      	ands	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f20:	e007      	b.n	8000f32 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d109      	bne.n	8000f4e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	401a      	ands	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f4c:	e007      	b.n	8000f5e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	431a      	orrs	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d107      	bne.n	8000f76 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f7c:	f023 0201 	bic.w	r2, r3, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e006      	b.n	8000f98 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
  }
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40006400 	.word	0x40006400

08000fa8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d12e      	bne.n	800101a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fd4:	f7ff fddc 	bl	8000b90 <HAL_GetTick>
 8000fd8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fda:	e012      	b.n	8001002 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fdc:	f7ff fdd8 	bl	8000b90 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b0a      	cmp	r3, #10
 8000fe8:	d90b      	bls.n	8001002 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2205      	movs	r2, #5
 8000ffa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e012      	b.n	8001028 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1e5      	bne.n	8000fdc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e006      	b.n	8001028 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
  }
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001044:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800104e:	7ffb      	ldrb	r3, [r7, #31]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d003      	beq.n	800105c <HAL_CAN_AddTxMessage+0x2c>
 8001054:	7ffb      	ldrb	r3, [r7, #31]
 8001056:	2b02      	cmp	r3, #2
 8001058:	f040 80b8 	bne.w	80011cc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10a      	bne.n	800107c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800106c:	2b00      	cmp	r3, #0
 800106e:	d105      	bne.n	800107c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80a0 	beq.w	80011bc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	0e1b      	lsrs	r3, r3, #24
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d907      	bls.n	800109c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e09e      	b.n	80011da <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800109c:	2201      	movs	r2, #1
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	409a      	lsls	r2, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10d      	bne.n	80010ca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010b8:	68f9      	ldr	r1, [r7, #12]
 80010ba:	6809      	ldr	r1, [r1, #0]
 80010bc:	431a      	orrs	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3318      	adds	r3, #24
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	440b      	add	r3, r1
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e00f      	b.n	80010ea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010d4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010da:	68f9      	ldr	r1, [r7, #12]
 80010dc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010de:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3318      	adds	r3, #24
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	440b      	add	r3, r1
 80010e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6819      	ldr	r1, [r3, #0]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3318      	adds	r3, #24
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	440b      	add	r3, r1
 80010fa:	3304      	adds	r3, #4
 80010fc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	7d1b      	ldrb	r3, [r3, #20]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d111      	bne.n	800112a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3318      	adds	r3, #24
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4413      	add	r3, r2
 8001112:	3304      	adds	r3, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	6811      	ldr	r1, [r2, #0]
 800111a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3318      	adds	r3, #24
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	440b      	add	r3, r1
 8001126:	3304      	adds	r3, #4
 8001128:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3307      	adds	r3, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	061a      	lsls	r2, r3, #24
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3306      	adds	r3, #6
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	041b      	lsls	r3, r3, #16
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3305      	adds	r3, #5
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	4313      	orrs	r3, r2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	3204      	adds	r2, #4
 800114a:	7812      	ldrb	r2, [r2, #0]
 800114c:	4610      	mov	r0, r2
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	6811      	ldr	r1, [r2, #0]
 8001152:	ea43 0200 	orr.w	r2, r3, r0
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	440b      	add	r3, r1
 800115c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001160:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3303      	adds	r3, #3
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	061a      	lsls	r2, r3, #24
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3302      	adds	r3, #2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	041b      	lsls	r3, r3, #16
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3301      	adds	r3, #1
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	4313      	orrs	r3, r2
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	4610      	mov	r0, r2
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	6811      	ldr	r1, [r2, #0]
 8001188:	ea43 0200 	orr.w	r2, r3, r0
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	440b      	add	r3, r1
 8001192:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001196:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3318      	adds	r3, #24
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	6811      	ldr	r1, [r2, #0]
 80011aa:	f043 0201 	orr.w	r2, r3, #1
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3318      	adds	r3, #24
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	440b      	add	r3, r1
 80011b6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e00e      	b.n	80011da <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e006      	b.n	80011da <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
  }
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011e6:	b480      	push	{r7}
 80011e8:	b087      	sub	sp, #28
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d003      	beq.n	800120a <HAL_CAN_GetRxMessage+0x24>
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	2b02      	cmp	r3, #2
 8001206:	f040 80f3 	bne.w	80013f0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10e      	bne.n	800122e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d116      	bne.n	800124c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e0e7      	b.n	80013fe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e0d8      	b.n	80013fe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	331b      	adds	r3, #27
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0204 	and.w	r2, r3, #4
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10c      	bne.n	8001284 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	331b      	adds	r3, #27
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	4413      	add	r3, r2
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0d5b      	lsrs	r3, r3, #21
 800127a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e00b      	b.n	800129c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	331b      	adds	r3, #27
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	4413      	add	r3, r2
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	08db      	lsrs	r3, r3, #3
 8001294:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	331b      	adds	r3, #27
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	4413      	add	r3, r2
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0202 	and.w	r2, r3, #2
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	331b      	adds	r3, #27
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	4413      	add	r3, r2
 80012be:	3304      	adds	r3, #4
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 020f 	and.w	r2, r3, #15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	331b      	adds	r3, #27
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	3304      	adds	r3, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	331b      	adds	r3, #27
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	4413      	add	r3, r2
 80012ee:	3304      	adds	r3, #4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	0c1b      	lsrs	r3, r3, #16
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	4413      	add	r3, r2
 8001304:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	4413      	add	r3, r2
 800131a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0a1a      	lsrs	r2, r3, #8
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	4413      	add	r3, r2
 8001334:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0c1a      	lsrs	r2, r3, #16
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3302      	adds	r3, #2
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	4413      	add	r3, r2
 800134e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0e1a      	lsrs	r2, r3, #24
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	3303      	adds	r3, #3
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	3304      	adds	r3, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	4413      	add	r3, r2
 8001380:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	0a1a      	lsrs	r2, r3, #8
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	3305      	adds	r3, #5
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0c1a      	lsrs	r2, r3, #16
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	3306      	adds	r3, #6
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	0e1a      	lsrs	r2, r3, #24
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	3307      	adds	r3, #7
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d108      	bne.n	80013dc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0220 	orr.w	r2, r2, #32
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	e007      	b.n	80013ec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0220 	orr.w	r2, r2, #32
 80013ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e006      	b.n	80013fe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
  }
}
 80013fe:	4618      	mov	r0, r3
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d002      	beq.n	8001428 <HAL_CAN_ActivateNotification+0x1e>
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d109      	bne.n	800143c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6959      	ldr	r1, [r3, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	e006      	b.n	800144a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
  }
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b08a      	sub	sp, #40	; 0x28
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d07c      	beq.n	8001596 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d023      	beq.n	80014ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2201      	movs	r2, #1
 80014ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f983 	bl	80017c4 <HAL_CAN_TxMailbox0CompleteCallback>
 80014be:	e016      	b.n	80014ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d004      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
 80014d2:	e00c      	b.n	80014ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
 80014e6:	e002      	b.n	80014ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f989 	bl	8001800 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d024      	beq.n	8001542 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001500:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f963 	bl	80017d8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001512:	e016      	b.n	8001542 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151a:	2b00      	cmp	r3, #0
 800151c:	d004      	beq.n	8001528 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
 8001526:	e00c      	b.n	8001542 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
 800153a:	e002      	b.n	8001542 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f969 	bl	8001814 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d024      	beq.n	8001596 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001554:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f943 	bl	80017ec <HAL_CAN_TxMailbox2CompleteCallback>
 8001566:	e016      	b.n	8001596 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
 800157a:	e00c      	b.n	8001596 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
 800158e:	e002      	b.n	8001596 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f949 	bl	8001828 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2210      	movs	r2, #16
 80015b8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00b      	beq.n	80015dc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2208      	movs	r2, #8
 80015d4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f930 	bl	800183c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff f803 	bl	8000600 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00c      	beq.n	800161e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001614:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2210      	movs	r2, #16
 800161c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	f003 0320 	and.w	r3, r3, #32
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00b      	beq.n	8001640 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2208      	movs	r2, #8
 8001638:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f912 	bl	8001864 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	d009      	beq.n	800165e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f8f9 	bl	8001850 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00b      	beq.n	8001680 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2210      	movs	r2, #16
 8001678:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f8fc 	bl	8001878 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2208      	movs	r2, #8
 800169a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f8f5 	bl	800188c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d07b      	beq.n	80017a4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d072      	beq.n	800179c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001710:	2b00      	cmp	r3, #0
 8001712:	d043      	beq.n	800179c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800171a:	2b00      	cmp	r3, #0
 800171c:	d03e      	beq.n	800179c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001724:	2b60      	cmp	r3, #96	; 0x60
 8001726:	d02b      	beq.n	8001780 <HAL_CAN_IRQHandler+0x32a>
 8001728:	2b60      	cmp	r3, #96	; 0x60
 800172a:	d82e      	bhi.n	800178a <HAL_CAN_IRQHandler+0x334>
 800172c:	2b50      	cmp	r3, #80	; 0x50
 800172e:	d022      	beq.n	8001776 <HAL_CAN_IRQHandler+0x320>
 8001730:	2b50      	cmp	r3, #80	; 0x50
 8001732:	d82a      	bhi.n	800178a <HAL_CAN_IRQHandler+0x334>
 8001734:	2b40      	cmp	r3, #64	; 0x40
 8001736:	d019      	beq.n	800176c <HAL_CAN_IRQHandler+0x316>
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d826      	bhi.n	800178a <HAL_CAN_IRQHandler+0x334>
 800173c:	2b30      	cmp	r3, #48	; 0x30
 800173e:	d010      	beq.n	8001762 <HAL_CAN_IRQHandler+0x30c>
 8001740:	2b30      	cmp	r3, #48	; 0x30
 8001742:	d822      	bhi.n	800178a <HAL_CAN_IRQHandler+0x334>
 8001744:	2b10      	cmp	r3, #16
 8001746:	d002      	beq.n	800174e <HAL_CAN_IRQHandler+0x2f8>
 8001748:	2b20      	cmp	r3, #32
 800174a:	d005      	beq.n	8001758 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800174c:	e01d      	b.n	800178a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001756:	e019      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001760:	e014      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f043 0320 	orr.w	r3, r3, #32
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800176a:	e00f      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001774:	e00a      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800177e:	e005      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001788:	e000      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            break;
 800178a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800179a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2204      	movs	r2, #4
 80017a2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d008      	beq.n	80017bc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f872 	bl	80018a0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <__NVIC_GetPriorityGrouping+0x18>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	f003 0307 	and.w	r3, r3, #7
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db0b      	blt.n	8001942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	4907      	ldr	r1, [pc, #28]	; (8001950 <__NVIC_EnableIRQ+0x38>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2001      	movs	r0, #1
 800193a:	fa00 f202 	lsl.w	r2, r0, r2
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	db0a      	blt.n	800197e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	490c      	ldr	r1, [pc, #48]	; (80019a0 <__NVIC_SetPriority+0x4c>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	440b      	add	r3, r1
 8001978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800197c:	e00a      	b.n	8001994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4908      	ldr	r1, [pc, #32]	; (80019a4 <__NVIC_SetPriority+0x50>)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	3b04      	subs	r3, #4
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	440b      	add	r3, r1
 8001992:	761a      	strb	r2, [r3, #24]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f1c3 0307 	rsb	r3, r3, #7
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	bf28      	it	cs
 80019c6:	2304      	movcs	r3, #4
 80019c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3304      	adds	r3, #4
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d902      	bls.n	80019d8 <NVIC_EncodePriority+0x30>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3b03      	subs	r3, #3
 80019d6:	e000      	b.n	80019da <NVIC_EncodePriority+0x32>
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43da      	mvns	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	401a      	ands	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43d9      	mvns	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	4313      	orrs	r3, r2
         );
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a20:	d301      	bcc.n	8001a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00f      	b.n	8001a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <SysTick_Config+0x40>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2e:	210f      	movs	r1, #15
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f7ff ff8e 	bl	8001954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <SysTick_Config+0x40>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <SysTick_Config+0x40>)
 8001a40:	2207      	movs	r2, #7
 8001a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010

08001a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff29 	bl	80018b4 <__NVIC_SetPriorityGrouping>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff3e 	bl	80018fc <__NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff8e 	bl	80019a8 <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5d 	bl	8001954 <__NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff31 	bl	8001918 <__NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffa2 	bl	8001a10 <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	e16b      	b.n	8001dcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f040 815a 	bne.w	8001dc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d005      	beq.n	8001b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d130      	bne.n	8001b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d017      	beq.n	8001bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d123      	bne.n	8001c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	69b9      	ldr	r1, [r7, #24]
 8001c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80b4 	beq.w	8001dc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b60      	ldr	r3, [pc, #384]	; (8001de4 <HAL_GPIO_Init+0x30c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a5f      	ldr	r2, [pc, #380]	; (8001de4 <HAL_GPIO_Init+0x30c>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_GPIO_Init+0x30c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c7a:	4a5b      	ldr	r2, [pc, #364]	; (8001de8 <HAL_GPIO_Init+0x310>)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a52      	ldr	r2, [pc, #328]	; (8001dec <HAL_GPIO_Init+0x314>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d02b      	beq.n	8001cfe <HAL_GPIO_Init+0x226>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a51      	ldr	r2, [pc, #324]	; (8001df0 <HAL_GPIO_Init+0x318>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d025      	beq.n	8001cfa <HAL_GPIO_Init+0x222>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a50      	ldr	r2, [pc, #320]	; (8001df4 <HAL_GPIO_Init+0x31c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01f      	beq.n	8001cf6 <HAL_GPIO_Init+0x21e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	; (8001df8 <HAL_GPIO_Init+0x320>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_Init+0x21a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x216>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <HAL_GPIO_Init+0x328>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x212>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_GPIO_Init+0x32c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x20e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_GPIO_Init+0x330>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x20a>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e00e      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_GPIO_Init+0x310>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d42:	4a32      	ldr	r2, [pc, #200]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d48:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d6c:	4a27      	ldr	r2, [pc, #156]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d96:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc0:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f ae90 	bls.w	8001af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40021c00 	.word	0x40021c00
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	619a      	str	r2, [r3, #24]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e54:	887a      	ldrh	r2, [r7, #2]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	041a      	lsls	r2, r3, #16
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	400b      	ands	r3, r1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e78:	b08f      	sub	sp, #60	; 0x3c
 8001e7a:	af0a      	add	r7, sp, #40	; 0x28
 8001e7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e10f      	b.n	80020a8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f005 fd04 	bl	80078b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2203      	movs	r2, #3
 8001eac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f001 ffd5 	bl	8003e76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	687e      	ldr	r6, [r7, #4]
 8001ed4:	466d      	mov	r5, sp
 8001ed6:	f106 0410 	add.w	r4, r6, #16
 8001eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eea:	1d33      	adds	r3, r6, #4
 8001eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eee:	6838      	ldr	r0, [r7, #0]
 8001ef0:	f001 feac 	bl	8003c4c <USB_CoreInit>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0d0      	b.n	80020a8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 ffc3 	bl	8003e98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e04a      	b.n	8001fae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	333d      	adds	r3, #61	; 0x3d
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	333c      	adds	r3, #60	; 0x3c
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	b298      	uxth	r0, r3
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3344      	adds	r3, #68	; 0x44
 8001f54:	4602      	mov	r2, r0
 8001f56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3340      	adds	r3, #64	; 0x40
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3348      	adds	r3, #72	; 0x48
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	334c      	adds	r3, #76	; 0x4c
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3354      	adds	r3, #84	; 0x54
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	3301      	adds	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d3af      	bcc.n	8001f18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e044      	b.n	8002048 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	3301      	adds	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	d3b5      	bcc.n	8001fbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	687e      	ldr	r6, [r7, #4]
 800205a:	466d      	mov	r5, sp
 800205c:	f106 0410 	add.w	r4, r6, #16
 8002060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002068:	e894 0003 	ldmia.w	r4, {r0, r1}
 800206c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002070:	1d33      	adds	r3, r6, #4
 8002072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002074:	6838      	ldr	r0, [r7, #0]
 8002076:	f001 ff5b 	bl	8003f30 <USB_DevInit>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e00d      	b.n	80020a8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 f8aa 	bl	80051fa <USB_DevDisconnect>

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_PCD_Start+0x1c>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e020      	b.n	800210e <HAL_PCD_Start+0x5e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d109      	bne.n	80020f0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d005      	beq.n	80020f0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f001 fead 	bl	8003e54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 f85a 	bl	80051b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002116:	b590      	push	{r4, r7, lr}
 8002118:	b08d      	sub	sp, #52	; 0x34
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f003 f918 	bl	8005362 <USB_GetMode>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	f040 848a 	bne.w	8002a4e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f003 f87c 	bl	800523c <USB_ReadInterrupts>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8480 	beq.w	8002a4c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f003 f869 	bl	800523c <USB_ReadInterrupts>
 800216a:	4603      	mov	r3, r0
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b02      	cmp	r3, #2
 8002172:	d107      	bne.n	8002184 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f002 0202 	and.w	r2, r2, #2
 8002182:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 f857 	bl	800523c <USB_ReadInterrupts>
 800218e:	4603      	mov	r3, r0
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b10      	cmp	r3, #16
 8002196:	d161      	bne.n	800225c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0210 	bic.w	r2, r2, #16
 80021a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	0c5b      	lsrs	r3, r3, #17
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d124      	bne.n	800221e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d035      	beq.n	800224c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	6a38      	ldr	r0, [r7, #32]
 80021f4:	f002 fe8e 	bl	8004f14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002204:	441a      	add	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002216:	441a      	add	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	621a      	str	r2, [r3, #32]
 800221c:	e016      	b.n	800224c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	0c5b      	lsrs	r3, r3, #17
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	2b06      	cmp	r3, #6
 8002228:	d110      	bne.n	800224c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002230:	2208      	movs	r2, #8
 8002232:	4619      	mov	r1, r3
 8002234:	6a38      	ldr	r0, [r7, #32]
 8002236:	f002 fe6d 	bl	8004f14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	6a1a      	ldr	r2, [r3, #32]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002246:	441a      	add	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0210 	orr.w	r2, r2, #16
 800225a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f002 ffeb 	bl	800523c <USB_ReadInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800226c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002270:	f040 80a7 	bne.w	80023c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f002 fff0 	bl	8005262 <USB_ReadDevAllOutEpInterrupt>
 8002282:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002284:	e099      	b.n	80023ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 808e 	beq.w	80023ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f003 f814 	bl	80052ca <USB_ReadDevOutEPInterrupt>
 80022a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ba:	461a      	mov	r2, r3
 80022bc:	2301      	movs	r3, #1
 80022be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fec2 	bl	800304c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022de:	461a      	mov	r2, r3
 80022e0:	2308      	movs	r3, #8
 80022e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 ff98 	bl	800321c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002302:	461a      	mov	r2, r3
 8002304:	2310      	movs	r3, #16
 8002306:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d030      	beq.n	8002374 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	2b80      	cmp	r3, #128	; 0x80
 800231c:	d109      	bne.n	8002332 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800232c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002330:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	78db      	ldrb	r3, [r3, #3]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2200      	movs	r2, #0
 8002354:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	b2db      	uxtb	r3, r3
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f005 fbad 	bl	8007abc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236e:	461a      	mov	r2, r3
 8002370:	2302      	movs	r3, #2
 8002372:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238a:	461a      	mov	r2, r3
 800238c:	2320      	movs	r3, #32
 800238e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a6:	461a      	mov	r2, r3
 80023a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	3301      	adds	r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f47f af62 	bne.w	8002286 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 ff38 	bl	800523c <USB_ReadInterrupts>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023d6:	f040 80db 	bne.w	8002590 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 ff59 	bl	8005296 <USB_ReadDevAllInEpInterrupt>
 80023e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023ea:	e0cd      	b.n	8002588 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80c2 	beq.w	800257c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f002 ff7f 	bl	8005306 <USB_ReadDevInEPInterrupt>
 8002408:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d057      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	2201      	movs	r2, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	43db      	mvns	r3, r3
 800242e:	69f9      	ldr	r1, [r7, #28]
 8002430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002434:	4013      	ands	r3, r2
 8002436:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002444:	461a      	mov	r2, r3
 8002446:	2301      	movs	r3, #1
 8002448:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d132      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	334c      	adds	r3, #76	; 0x4c
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4403      	add	r3, r0
 8002472:	3348      	adds	r3, #72	; 0x48
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4419      	add	r1, r3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4403      	add	r3, r0
 8002486:	334c      	adds	r3, #76	; 0x4c
 8002488:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d113      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x3a2>
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	3354      	adds	r3, #84	; 0x54
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d108      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024b0:	461a      	mov	r2, r3
 80024b2:	2101      	movs	r1, #1
 80024b4:	f002 ff86 	bl	80053c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f005 fa77 	bl	80079b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024da:	461a      	mov	r2, r3
 80024dc:	2308      	movs	r3, #8
 80024de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024f6:	461a      	mov	r2, r3
 80024f8:	2310      	movs	r3, #16
 80024fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002512:	461a      	mov	r2, r3
 8002514:	2340      	movs	r3, #64	; 0x40
 8002516:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d023      	beq.n	800256a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002524:	6a38      	ldr	r0, [r7, #32]
 8002526:	f001 fe67 	bl	80041f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	3338      	adds	r3, #56	; 0x38
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	78db      	ldrb	r3, [r3, #3]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d108      	bne.n	8002558 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2200      	movs	r2, #0
 800254a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	b2db      	uxtb	r3, r3
 8002550:	4619      	mov	r1, r3
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f005 fac4 	bl	8007ae0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002564:	461a      	mov	r2, r3
 8002566:	2302      	movs	r3, #2
 8002568:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fcdb 	bl	8002f32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	3301      	adds	r3, #1
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	2b00      	cmp	r3, #0
 800258c:	f47f af2e 	bne.w	80023ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fe51 	bl	800523c <USB_ReadInterrupts>
 800259a:	4603      	mov	r3, r0
 800259c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025a4:	d122      	bne.n	80025ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d108      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025cc:	2100      	movs	r1, #0
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fec2 	bl	8003358 <HAL_PCDEx_LPM_Callback>
 80025d4:	e002      	b.n	80025dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f005 fa62 	bl	8007aa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f002 fe23 	bl	800523c <USB_ReadInterrupts>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002600:	d112      	bne.n	8002628 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d102      	bne.n	8002618 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f005 fa1e 	bl	8007a54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002626:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f002 fe05 	bl	800523c <USB_ReadInterrupts>
 8002632:	4603      	mov	r3, r0
 8002634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263c:	f040 80b7 	bne.w	80027ae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2110      	movs	r1, #16
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fdcc 	bl	80041f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002660:	2300      	movs	r3, #0
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002664:	e046      	b.n	80026f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002672:	461a      	mov	r2, r3
 8002674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002678:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800268a:	0151      	lsls	r1, r2, #5
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	440a      	add	r2, r1
 8002690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002698:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a6:	461a      	mov	r2, r3
 80026a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026be:	0151      	lsls	r1, r2, #5
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	440a      	add	r2, r1
 80026c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026de:	0151      	lsls	r1, r2, #5
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	440a      	add	r2, r1
 80026e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	3301      	adds	r3, #1
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d3b3      	bcc.n	8002666 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800270c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002710:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272a:	f043 030b 	orr.w	r3, r3, #11
 800272e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002740:	f043 030b 	orr.w	r3, r3, #11
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	e015      	b.n	8002774 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800275a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800275e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800276e:	f043 030b 	orr.w	r3, r3, #11
 8002772:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002782:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002786:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002798:	461a      	mov	r2, r3
 800279a:	f002 fe13 	bl	80053c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 fd42 	bl	800523c <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c2:	d124      	bne.n	800280e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f002 fdd8 	bl	800537e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f001 fd8d 	bl	80042f2 <USB_GetDevSpeed>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681c      	ldr	r4, [r3, #0]
 80027e4:	f001 fa26 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 80027e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	4620      	mov	r0, r4
 80027f4:	f001 fa8c 	bl	8003d10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f005 f902 	bl	8007a02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800280c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f002 fd12 	bl	800523c <USB_ReadInterrupts>
 8002818:	4603      	mov	r3, r0
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b08      	cmp	r3, #8
 8002820:	d10a      	bne.n	8002838 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f005 f8df 	bl	80079e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f002 0208 	and.w	r2, r2, #8
 8002836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f002 fcfd 	bl	800523c <USB_ReadInterrupts>
 8002842:	4603      	mov	r3, r0
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	2b80      	cmp	r3, #128	; 0x80
 800284a:	d122      	bne.n	8002892 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002858:	2301      	movs	r3, #1
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
 800285c:	e014      	b.n	8002888 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d105      	bne.n	8002882 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	b2db      	uxtb	r3, r3
 800287a:	4619      	mov	r1, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fb27 	bl	8002ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	3301      	adds	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288e:	429a      	cmp	r2, r3
 8002890:	d3e5      	bcc.n	800285e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 fcd0 	bl	800523c <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028a6:	d13b      	bne.n	8002920 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028a8:	2301      	movs	r3, #1
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
 80028ac:	e02b      	b.n	8002906 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3340      	adds	r3, #64	; 0x40
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d115      	bne.n	8002900 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80028d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	da12      	bge.n	8002900 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	333f      	adds	r3, #63	; 0x3f
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fae8 	bl	8002ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	3301      	adds	r3, #1
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	429a      	cmp	r2, r3
 800290e:	d3ce      	bcc.n	80028ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800291e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f002 fc89 	bl	800523c <USB_ReadInterrupts>
 800292a:	4603      	mov	r3, r0
 800292c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002934:	d155      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002936:	2301      	movs	r3, #1
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
 800293a:	e045      	b.n	80029c8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d12e      	bne.n	80029c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002964:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002966:	2b00      	cmp	r3, #0
 8002968:	da2b      	bge.n	80029c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002976:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800297a:	429a      	cmp	r2, r3
 800297c:	d121      	bne.n	80029c2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029be:	6053      	str	r3, [r2, #4]
            break;
 80029c0:	e007      	b.n	80029d2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	3301      	adds	r3, #1
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d3b4      	bcc.n	800293c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 fc28 	bl	800523c <USB_ReadInterrupts>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f6:	d10a      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f005 f883 	bl	8007b04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f002 fc12 	bl	800523c <USB_ReadInterrupts>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d115      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f005 f873 	bl	8007b20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	e000      	b.n	8002a4e <HAL_PCD_IRQHandler+0x938>
      return;
 8002a4c:	bf00      	nop
    }
  }
}
 8002a4e:	3734      	adds	r7, #52	; 0x34
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd90      	pop	{r4, r7, pc}

08002a54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_PCD_SetAddress+0x1a>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e013      	b.n	8002a96 <HAL_PCD_SetAddress+0x42>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 fb70 	bl	800516c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	4608      	mov	r0, r1
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4603      	mov	r3, r0
 8002aae:	70fb      	strb	r3, [r7, #3]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	803b      	strh	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	da0f      	bge.n	8002ae4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	3338      	adds	r3, #56	; 0x38
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	705a      	strb	r2, [r3, #1]
 8002ae2:	e00f      	b.n	8002b04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b10:	883a      	ldrh	r2, [r7, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	78ba      	ldrb	r2, [r7, #2]
 8002b1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	785b      	ldrb	r3, [r3, #1]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d004      	beq.n	8002b2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b2e:	78bb      	ldrb	r3, [r7, #2]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d102      	bne.n	8002b3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_PCD_EP_Open+0xaa>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e00e      	b.n	8002b66 <HAL_PCD_EP_Open+0xc8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68f9      	ldr	r1, [r7, #12]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 fbf0 	bl	800433c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b64:	7afb      	ldrb	r3, [r7, #11]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	da0f      	bge.n	8002ba2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	f003 020f 	and.w	r2, r3, #15
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	3338      	adds	r3, #56	; 0x38
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	3304      	adds	r3, #4
 8002b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	705a      	strb	r2, [r3, #1]
 8002ba0:	e00f      	b.n	8002bc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 020f 	and.w	r2, r3, #15
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3304      	adds	r3, #4
 8002bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_PCD_EP_Close+0x6e>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e00e      	b.n	8002bfa <HAL_PCD_EP_Close+0x8c>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68f9      	ldr	r1, [r7, #12]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 fc2e 	bl	800444c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c12:	7afb      	ldrb	r3, [r7, #11]
 8002c14:	f003 020f 	and.w	r2, r3, #15
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2200      	movs	r2, #0
 8002c42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c44:	7afb      	ldrb	r3, [r7, #11]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d102      	bne.n	8002c5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c5e:	7afb      	ldrb	r3, [r7, #11]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	6979      	ldr	r1, [r7, #20]
 8002c76:	f001 ff0d 	bl	8004a94 <USB_EP0StartXfer>
 8002c7a:	e008      	b.n	8002c8e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	6979      	ldr	r1, [r7, #20]
 8002c8a:	f001 fcbb 	bl	8004604 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 020f 	and.w	r2, r3, #15
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd8:	7afb      	ldrb	r3, [r7, #11]
 8002cda:	f003 020f 	and.w	r2, r3, #15
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	3338      	adds	r3, #56	; 0x38
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4413      	add	r3, r2
 8002cec:	3304      	adds	r3, #4
 8002cee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2201      	movs	r2, #1
 8002d06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d08:	7afb      	ldrb	r3, [r7, #11]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d102      	bne.n	8002d22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d22:	7afb      	ldrb	r3, [r7, #11]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	6979      	ldr	r1, [r7, #20]
 8002d3a:	f001 feab 	bl	8004a94 <USB_EP0StartXfer>
 8002d3e:	e008      	b.n	8002d52 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	6979      	ldr	r1, [r7, #20]
 8002d4e:	f001 fc59 	bl	8004604 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	f003 020f 	and.w	r2, r3, #15
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d901      	bls.n	8002d7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e050      	b.n	8002e1c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da0f      	bge.n	8002da2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 020f 	and.w	r2, r3, #15
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	3338      	adds	r3, #56	; 0x38
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	3304      	adds	r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	705a      	strb	r2, [r3, #1]
 8002da0:	e00d      	b.n	8002dbe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_PCD_EP_SetStall+0x82>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e01e      	b.n	8002e1c <HAL_PCD_EP_SetStall+0xc0>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68f9      	ldr	r1, [r7, #12]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f002 f8e9 	bl	8004fc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	b2d9      	uxtb	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f002 fad9 	bl	80053c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d901      	bls.n	8002e42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e042      	b.n	8002ec8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	da0f      	bge.n	8002e6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 020f 	and.w	r2, r3, #15
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	3338      	adds	r3, #56	; 0x38
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3304      	adds	r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	705a      	strb	r2, [r3, #1]
 8002e68:	e00f      	b.n	8002e8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	f003 020f 	and.w	r2, r3, #15
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	3304      	adds	r3, #4
 8002e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_PCD_EP_ClrStall+0x86>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e00e      	b.n	8002ec8 <HAL_PCD_EP_ClrStall+0xa4>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68f9      	ldr	r1, [r7, #12]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f002 f8f1 	bl	80050a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	da0c      	bge.n	8002efe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	f003 020f 	and.w	r2, r3, #15
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	3338      	adds	r3, #56	; 0x38
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3304      	adds	r3, #4
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	e00c      	b.n	8002f18 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	f003 020f 	and.w	r2, r3, #15
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	3304      	adds	r3, #4
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68f9      	ldr	r1, [r7, #12]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f001 ff10 	bl	8004d44 <USB_EPStopXfer>
 8002f24:	4603      	mov	r3, r0
 8002f26:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f28:	7afb      	ldrb	r3, [r7, #11]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b08a      	sub	sp, #40	; 0x28
 8002f36:	af02      	add	r7, sp, #8
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	3338      	adds	r3, #56	; 0x38
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	3304      	adds	r3, #4
 8002f58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1a      	ldr	r2, [r3, #32]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d901      	bls.n	8002f6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e06c      	b.n	8003044 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d902      	bls.n	8002f86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3303      	adds	r3, #3
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f8e:	e02b      	b.n	8002fe8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	699a      	ldr	r2, [r3, #24]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d902      	bls.n	8002fac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	3303      	adds	r3, #3
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6919      	ldr	r1, [r3, #16]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	4603      	mov	r3, r0
 8002fca:	6978      	ldr	r0, [r7, #20]
 8002fcc:	f001 ff64 	bl	8004e98 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	441a      	add	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a1a      	ldr	r2, [r3, #32]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	441a      	add	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d809      	bhi.n	8003012 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003006:	429a      	cmp	r2, r3
 8003008:	d203      	bcs.n	8003012 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1be      	bne.n	8002f90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	429a      	cmp	r2, r3
 800301c:	d811      	bhi.n	8003042 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	2201      	movs	r2, #1
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	43db      	mvns	r3, r3
 8003038:	6939      	ldr	r1, [r7, #16]
 800303a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800303e:	4013      	ands	r3, r2
 8003040:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	333c      	adds	r3, #60	; 0x3c
 8003064:	3304      	adds	r3, #4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d17b      	bne.n	800317a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4a61      	ldr	r2, [pc, #388]	; (8003214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	f240 80b9 	bls.w	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80b3 	beq.w	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	461a      	mov	r2, r3
 80030b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b4:	6093      	str	r3, [r2, #8]
 80030b6:	e0a7      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ce:	461a      	mov	r2, r3
 80030d0:	2320      	movs	r3, #32
 80030d2:	6093      	str	r3, [r2, #8]
 80030d4:	e098      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f040 8093 	bne.w	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4a4b      	ldr	r2, [pc, #300]	; (8003214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d90f      	bls.n	800310a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003100:	461a      	mov	r2, r3
 8003102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003106:	6093      	str	r3, [r2, #8]
 8003108:	e07e      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	3304      	adds	r3, #4
 800311e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	0159      	lsls	r1, r3, #5
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	440b      	add	r3, r1
 800312c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003136:	1ad2      	subs	r2, r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d114      	bne.n	800316c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003154:	461a      	mov	r2, r3
 8003156:	2101      	movs	r1, #1
 8003158:	f002 f934 	bl	80053c4 <USB_EP0_OutStart>
 800315c:	e006      	b.n	800316c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	441a      	add	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f004 fc02 	bl	800797c <HAL_PCD_DataOutStageCallback>
 8003178:	e046      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	4a26      	ldr	r2, [pc, #152]	; (8003218 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d124      	bne.n	80031cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	461a      	mov	r2, r3
 800319a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319e:	6093      	str	r3, [r2, #8]
 80031a0:	e032      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b8:	461a      	mov	r2, r3
 80031ba:	2320      	movs	r3, #32
 80031bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f004 fbd9 	bl	800797c <HAL_PCD_DataOutStageCallback>
 80031ca:	e01d      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d114      	bne.n	80031fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031f4:	461a      	mov	r2, r3
 80031f6:	2100      	movs	r1, #0
 80031f8:	f002 f8e4 	bl	80053c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f004 fbba 	bl	800797c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	4f54300a 	.word	0x4f54300a
 8003218:	4f54310a 	.word	0x4f54310a

0800321c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	333c      	adds	r3, #60	; 0x3c
 8003234:	3304      	adds	r3, #4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d90e      	bls.n	8003270 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003258:	2b00      	cmp	r3, #0
 800325a:	d009      	beq.n	8003270 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003268:	461a      	mov	r2, r3
 800326a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f004 fb71 	bl	8007958 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d90c      	bls.n	8003298 <PCD_EP_OutSetupPacket_int+0x7c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d108      	bne.n	8003298 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003290:	461a      	mov	r2, r3
 8003292:	2101      	movs	r1, #1
 8003294:	f002 f896 	bl	80053c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	4f54300a 	.word	0x4f54300a

080032a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
 80032b4:	4613      	mov	r3, r2
 80032b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032c6:	883b      	ldrh	r3, [r7, #0]
 80032c8:	0419      	lsls	r1, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
 80032d4:	e028      	b.n	8003328 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	4413      	add	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
 80032e8:	e00d      	b.n	8003306 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	3340      	adds	r3, #64	; 0x40
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	4413      	add	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	3301      	adds	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	3b01      	subs	r3, #1
 800330c:	429a      	cmp	r2, r3
 800330e:	d3ec      	bcc.n	80032ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003310:	883b      	ldrh	r3, [r7, #0]
 8003312:	0418      	lsls	r0, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6819      	ldr	r1, [r3, #0]
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	3b01      	subs	r3, #1
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	4302      	orrs	r2, r0
 8003320:	3340      	adds	r3, #64	; 0x40
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e267      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d075      	beq.n	800347a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800338e:	4b88      	ldr	r3, [pc, #544]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d00c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b85      	ldr	r3, [pc, #532]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d112      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4b82      	ldr	r3, [pc, #520]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b2:	d10b      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	4b7e      	ldr	r3, [pc, #504]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d05b      	beq.n	8003478 <HAL_RCC_OscConfig+0x108>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d157      	bne.n	8003478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e242      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d106      	bne.n	80033e4 <HAL_RCC_OscConfig+0x74>
 80033d6:	4b76      	ldr	r3, [pc, #472]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a75      	ldr	r2, [pc, #468]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e01d      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x98>
 80033ee:	4b70      	ldr	r3, [pc, #448]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6f      	ldr	r2, [pc, #444]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b6d      	ldr	r3, [pc, #436]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6c      	ldr	r2, [pc, #432]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 8003408:	4b69      	ldr	r3, [pc, #420]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a68      	ldr	r2, [pc, #416]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b66      	ldr	r3, [pc, #408]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a65      	ldr	r2, [pc, #404]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fd fbb2 	bl	8000b90 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003430:	f7fd fbae 	bl	8000b90 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e207      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0xc0>
 800344e:	e014      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fd fb9e 	bl	8000b90 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003458:	f7fd fb9a 	bl	8000b90 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1f3      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	4b51      	ldr	r3, [pc, #324]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0xe8>
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d063      	beq.n	800354e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003486:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b47      	ldr	r3, [pc, #284]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349a:	2b08      	cmp	r3, #8
 800349c:	d11c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349e:	4b44      	ldr	r3, [pc, #272]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d116      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e1c7      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c2:	4b3b      	ldr	r3, [pc, #236]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4937      	ldr	r1, [pc, #220]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	e03a      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e0:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_RCC_OscConfig+0x244>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fd fb53 	bl	8000b90 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fd fb4f 	bl	8000b90 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1a8      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4925      	ldr	r1, [pc, #148]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]
 8003520:	e015      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_RCC_OscConfig+0x244>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fd fb32 	bl	8000b90 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003530:	f7fd fb2e 	bl	8000b90 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e187      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d036      	beq.n	80035c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fd fb12 	bl	8000b90 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003570:	f7fd fb0e 	bl	8000b90 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e167      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x200>
 800358e:	e01b      	b.n	80035c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7fd fafb 	bl	8000b90 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359c:	e00e      	b.n	80035bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359e:	f7fd faf7 	bl	8000b90 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d907      	bls.n	80035bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e150      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	42470000 	.word	0x42470000
 80035b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ea      	bne.n	800359e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8097 	beq.w	8003704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035da:	4b81      	ldr	r3, [pc, #516]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	4b7d      	ldr	r3, [pc, #500]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4a7c      	ldr	r2, [pc, #496]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
 80035f6:	4b7a      	ldr	r3, [pc, #488]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b77      	ldr	r3, [pc, #476]	; (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d118      	bne.n	8003644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003612:	4b74      	ldr	r3, [pc, #464]	; (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a73      	ldr	r2, [pc, #460]	; (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361e:	f7fd fab7 	bl	8000b90 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003626:	f7fd fab3 	bl	8000b90 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e10c      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b6a      	ldr	r3, [pc, #424]	; (80037e4 <HAL_RCC_OscConfig+0x474>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x2ea>
 800364c:	4b64      	ldr	r3, [pc, #400]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4a63      	ldr	r2, [pc, #396]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6713      	str	r3, [r2, #112]	; 0x70
 8003658:	e01c      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b05      	cmp	r3, #5
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x30c>
 8003662:	4b5f      	ldr	r3, [pc, #380]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a5e      	ldr	r2, [pc, #376]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
 800366e:	4b5c      	ldr	r3, [pc, #368]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a5b      	ldr	r2, [pc, #364]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800367c:	4b58      	ldr	r3, [pc, #352]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	4a57      	ldr	r2, [pc, #348]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	; 0x70
 8003688:	4b55      	ldr	r3, [pc, #340]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4a54      	ldr	r2, [pc, #336]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 800368e:	f023 0304 	bic.w	r3, r3, #4
 8003692:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d015      	beq.n	80036c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fd fa78 	bl	8000b90 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fd fa74 	bl	8000b90 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0cb      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	4b49      	ldr	r3, [pc, #292]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ee      	beq.n	80036a4 <HAL_RCC_OscConfig+0x334>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c8:	f7fd fa62 	bl	8000b90 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fd fa5e 	bl	8000b90 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e0b5      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e6:	4b3e      	ldr	r3, [pc, #248]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ee      	bne.n	80036d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f8:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	4a38      	ldr	r2, [pc, #224]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003702:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80a1 	beq.w	8003850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800370e:	4b34      	ldr	r3, [pc, #208]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	d05c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d141      	bne.n	80037a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fd fa32 	bl	8000b90 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003730:	f7fd fa2e 	bl	8000b90 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e087      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	019b      	lsls	r3, r3, #6
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	3b01      	subs	r3, #1
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	491b      	ldr	r1, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fd fa07 	bl	8000b90 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003786:	f7fd fa03 	bl	8000b90 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e05c      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x416>
 80037a4:	e054      	b.n	8003850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fd f9f0 	bl	8000b90 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fd f9ec 	bl	8000b90 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e045      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x444>
 80037d2:	e03d      	b.n	8003850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e038      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40007000 	.word	0x40007000
 80037e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x4ec>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d028      	beq.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d121      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d11a      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	4293      	cmp	r3, r2
 8003826:	d111      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	3b01      	subs	r3, #1
 8003836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800

08003860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0cc      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b68      	ldr	r3, [pc, #416]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d90c      	bls.n	800389c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b65      	ldr	r3, [pc, #404]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b63      	ldr	r3, [pc, #396]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b8      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b4:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a58      	ldr	r2, [pc, #352]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038cc:	4b53      	ldr	r3, [pc, #332]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a52      	ldr	r2, [pc, #328]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d8:	4b50      	ldr	r3, [pc, #320]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	494d      	ldr	r1, [pc, #308]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d044      	beq.n	8003980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b47      	ldr	r3, [pc, #284]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d119      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e07f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d003      	beq.n	800391e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391a:	2b03      	cmp	r3, #3
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e067      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b37      	ldr	r3, [pc, #220]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4934      	ldr	r1, [pc, #208]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003950:	f7fd f91e 	bl	8000b90 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fd f91a 	bl	8000b90 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e04f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d20c      	bcs.n	80039a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e032      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4916      	ldr	r1, [pc, #88]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	490e      	ldr	r1, [pc, #56]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039e6:	f000 f821 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	490a      	ldr	r1, [pc, #40]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	5ccb      	ldrb	r3, [r1, r3]
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a02:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd f87e 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023c00 	.word	0x40023c00
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	08007fb4 	.word	0x08007fb4
 8003a24:	20000000 	.word	0x20000000
 8003a28:	20000004 	.word	0x20000004

08003a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a30:	b094      	sub	sp, #80	; 0x50
 8003a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	647b      	str	r3, [r7, #68]	; 0x44
 8003a38:	2300      	movs	r3, #0
 8003a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a44:	4b79      	ldr	r3, [pc, #484]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d00d      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x40>
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	f200 80e1 	bhi.w	8003c18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x34>
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a5e:	e0db      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b73      	ldr	r3, [pc, #460]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a64:	e0db      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a66:	4b72      	ldr	r3, [pc, #456]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a6a:	e0d8      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a6c:	4b6f      	ldr	r3, [pc, #444]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a76:	4b6d      	ldr	r3, [pc, #436]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d063      	beq.n	8003b4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a82:	4b6a      	ldr	r3, [pc, #424]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	2200      	movs	r2, #0
 8003a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a94:	633b      	str	r3, [r7, #48]	; 0x30
 8003a96:	2300      	movs	r3, #0
 8003a98:	637b      	str	r3, [r7, #52]	; 0x34
 8003a9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	0159      	lsls	r1, r3, #5
 8003aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab0:	0150      	lsls	r0, r2, #5
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	1a51      	subs	r1, r2, r1
 8003aba:	6139      	str	r1, [r7, #16]
 8003abc:	4629      	mov	r1, r5
 8003abe:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ad0:	4659      	mov	r1, fp
 8003ad2:	018b      	lsls	r3, r1, #6
 8003ad4:	4651      	mov	r1, sl
 8003ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ada:	4651      	mov	r1, sl
 8003adc:	018a      	lsls	r2, r1, #6
 8003ade:	4651      	mov	r1, sl
 8003ae0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	eb63 0901 	sbc.w	r9, r3, r1
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afe:	4690      	mov	r8, r2
 8003b00:	4699      	mov	r9, r3
 8003b02:	4623      	mov	r3, r4
 8003b04:	eb18 0303 	adds.w	r3, r8, r3
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	462b      	mov	r3, r5
 8003b0c:	eb49 0303 	adc.w	r3, r9, r3
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b1e:	4629      	mov	r1, r5
 8003b20:	028b      	lsls	r3, r1, #10
 8003b22:	4621      	mov	r1, r4
 8003b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b28:	4621      	mov	r1, r4
 8003b2a:	028a      	lsls	r2, r1, #10
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b32:	2200      	movs	r2, #0
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b3c:	f7fc fb44 	bl	80001c8 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4613      	mov	r3, r2
 8003b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b48:	e058      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4a:	4b38      	ldr	r3, [pc, #224]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	099b      	lsrs	r3, r3, #6
 8003b50:	2200      	movs	r2, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	4611      	mov	r1, r2
 8003b56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	f04f 0000 	mov.w	r0, #0
 8003b6c:	f04f 0100 	mov.w	r1, #0
 8003b70:	0159      	lsls	r1, r3, #5
 8003b72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b76:	0150      	lsls	r0, r2, #5
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b82:	4649      	mov	r1, r9
 8003b84:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b9c:	ebb2 040a 	subs.w	r4, r2, sl
 8003ba0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	00eb      	lsls	r3, r5, #3
 8003bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb2:	00e2      	lsls	r2, r4, #3
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	4643      	mov	r3, r8
 8003bba:	18e3      	adds	r3, r4, r3
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	eb45 0303 	adc.w	r3, r5, r3
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	028b      	lsls	r3, r1, #10
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bdc:	4621      	mov	r1, r4
 8003bde:	028a      	lsls	r2, r1, #10
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be6:	2200      	movs	r2, #0
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	61fa      	str	r2, [r7, #28]
 8003bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf0:	f7fc faea 	bl	80001c8 <__aeabi_uldivmod>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	3301      	adds	r3, #1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c16:	e002      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3750      	adds	r7, #80	; 0x50
 8003c24:	46bd      	mov	sp, r7
 8003c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	00f42400 	.word	0x00f42400

08003c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000000 	.word	0x20000000

08003c4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	f107 001c 	add.w	r0, r7, #28
 8003c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d122      	bne.n	8003caa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d105      	bne.n	8003c9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f001 fbee 	bl	8005480 <USB_CoreReset>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	73fb      	strb	r3, [r7, #15]
 8003ca8:	e01a      	b.n	8003ce0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f001 fbe2 	bl	8005480 <USB_CoreReset>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
 8003cd2:	e005      	b.n	8003ce0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10b      	bne.n	8003cfe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f043 0206 	orr.w	r2, r3, #6
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d0a:	b004      	add	sp, #16
 8003d0c:	4770      	bx	lr
	...

08003d10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d165      	bne.n	8003df0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4a41      	ldr	r2, [pc, #260]	; (8003e2c <USB_SetTurnaroundTime+0x11c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d906      	bls.n	8003d3a <USB_SetTurnaroundTime+0x2a>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4a40      	ldr	r2, [pc, #256]	; (8003e30 <USB_SetTurnaroundTime+0x120>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d202      	bcs.n	8003d3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d34:	230f      	movs	r3, #15
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e062      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4a3c      	ldr	r2, [pc, #240]	; (8003e30 <USB_SetTurnaroundTime+0x120>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d306      	bcc.n	8003d50 <USB_SetTurnaroundTime+0x40>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4a3b      	ldr	r2, [pc, #236]	; (8003e34 <USB_SetTurnaroundTime+0x124>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d202      	bcs.n	8003d50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d4a:	230e      	movs	r3, #14
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e057      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4a38      	ldr	r2, [pc, #224]	; (8003e34 <USB_SetTurnaroundTime+0x124>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d306      	bcc.n	8003d66 <USB_SetTurnaroundTime+0x56>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4a37      	ldr	r2, [pc, #220]	; (8003e38 <USB_SetTurnaroundTime+0x128>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d202      	bcs.n	8003d66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d60:	230d      	movs	r3, #13
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e04c      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4a33      	ldr	r2, [pc, #204]	; (8003e38 <USB_SetTurnaroundTime+0x128>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d306      	bcc.n	8003d7c <USB_SetTurnaroundTime+0x6c>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4a32      	ldr	r2, [pc, #200]	; (8003e3c <USB_SetTurnaroundTime+0x12c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d802      	bhi.n	8003d7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d76:	230c      	movs	r3, #12
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e041      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4a2f      	ldr	r2, [pc, #188]	; (8003e3c <USB_SetTurnaroundTime+0x12c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d906      	bls.n	8003d92 <USB_SetTurnaroundTime+0x82>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4a2e      	ldr	r2, [pc, #184]	; (8003e40 <USB_SetTurnaroundTime+0x130>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d802      	bhi.n	8003d92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d8c:	230b      	movs	r3, #11
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e036      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4a2a      	ldr	r2, [pc, #168]	; (8003e40 <USB_SetTurnaroundTime+0x130>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d906      	bls.n	8003da8 <USB_SetTurnaroundTime+0x98>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4a29      	ldr	r2, [pc, #164]	; (8003e44 <USB_SetTurnaroundTime+0x134>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d802      	bhi.n	8003da8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003da2:	230a      	movs	r3, #10
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e02b      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <USB_SetTurnaroundTime+0x134>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d906      	bls.n	8003dbe <USB_SetTurnaroundTime+0xae>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4a25      	ldr	r2, [pc, #148]	; (8003e48 <USB_SetTurnaroundTime+0x138>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d202      	bcs.n	8003dbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003db8:	2309      	movs	r3, #9
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	e020      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <USB_SetTurnaroundTime+0x138>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d306      	bcc.n	8003dd4 <USB_SetTurnaroundTime+0xc4>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4a20      	ldr	r2, [pc, #128]	; (8003e4c <USB_SetTurnaroundTime+0x13c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d802      	bhi.n	8003dd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003dce:	2308      	movs	r3, #8
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e015      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4a1d      	ldr	r2, [pc, #116]	; (8003e4c <USB_SetTurnaroundTime+0x13c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d906      	bls.n	8003dea <USB_SetTurnaroundTime+0xda>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <USB_SetTurnaroundTime+0x140>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d202      	bcs.n	8003dea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003de4:	2307      	movs	r3, #7
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e00a      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003dea:	2306      	movs	r3, #6
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e007      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003df6:	2309      	movs	r3, #9
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	e001      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003dfc:	2309      	movs	r3, #9
 8003dfe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	029b      	lsls	r3, r3, #10
 8003e14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	00d8acbf 	.word	0x00d8acbf
 8003e30:	00e4e1c0 	.word	0x00e4e1c0
 8003e34:	00f42400 	.word	0x00f42400
 8003e38:	01067380 	.word	0x01067380
 8003e3c:	011a499f 	.word	0x011a499f
 8003e40:	01312cff 	.word	0x01312cff
 8003e44:	014ca43f 	.word	0x014ca43f
 8003e48:	016e3600 	.word	0x016e3600
 8003e4c:	01a6ab1f 	.word	0x01a6ab1f
 8003e50:	01e84800 	.word	0x01e84800

08003e54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f043 0201 	orr.w	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f023 0201 	bic.w	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d115      	bne.n	8003ee6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	f7fc fe6e 	bl	8000ba8 <HAL_Delay>
      ms++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f001 fa45 	bl	8005362 <USB_GetMode>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d01e      	beq.n	8003f1c <USB_SetCurrentMode+0x84>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b31      	cmp	r3, #49	; 0x31
 8003ee2:	d9f0      	bls.n	8003ec6 <USB_SetCurrentMode+0x2e>
 8003ee4:	e01a      	b.n	8003f1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d115      	bne.n	8003f18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ef8:	2001      	movs	r0, #1
 8003efa:	f7fc fe55 	bl	8000ba8 <HAL_Delay>
      ms++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3301      	adds	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f001 fa2c 	bl	8005362 <USB_GetMode>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <USB_SetCurrentMode+0x84>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b31      	cmp	r3, #49	; 0x31
 8003f14:	d9f0      	bls.n	8003ef8 <USB_SetCurrentMode+0x60>
 8003f16:	e001      	b.n	8003f1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e005      	b.n	8003f28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b32      	cmp	r3, #50	; 0x32
 8003f20:	d101      	bne.n	8003f26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f30:	b084      	sub	sp, #16
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	e009      	b.n	8003f64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3340      	adds	r3, #64	; 0x40
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3301      	adds	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b0e      	cmp	r3, #14
 8003f68:	d9f2      	bls.n	8003f50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11c      	bne.n	8003faa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7e:	f043 0302 	orr.w	r3, r3, #2
 8003f82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8003fa8:	e00b      	b.n	8003fc2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	461a      	mov	r2, r3
 8003fde:	680b      	ldr	r3, [r1, #0]
 8003fe0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d10c      	bne.n	8004002 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d104      	bne.n	8003ff8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fee:	2100      	movs	r1, #0
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f965 	bl	80042c0 <USB_SetDevSpeed>
 8003ff6:	e008      	b.n	800400a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f960 	bl	80042c0 <USB_SetDevSpeed>
 8004000:	e003      	b.n	800400a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004002:	2103      	movs	r1, #3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f95b 	bl	80042c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800400a:	2110      	movs	r1, #16
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f8f3 	bl	80041f8 <USB_FlushTxFifo>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f91f 	bl	8004260 <USB_FlushRxFifo>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004032:	461a      	mov	r2, r3
 8004034:	2300      	movs	r3, #0
 8004036:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	461a      	mov	r2, r3
 8004040:	2300      	movs	r3, #0
 8004042:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	461a      	mov	r2, r3
 800404c:	2300      	movs	r3, #0
 800404e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	e043      	b.n	80040de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800406c:	d118      	bne.n	80040a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004080:	461a      	mov	r2, r3
 8004082:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	e013      	b.n	80040b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	461a      	mov	r2, r3
 8004098:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e008      	b.n	80040b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ac:	461a      	mov	r2, r3
 80040ae:	2300      	movs	r3, #0
 80040b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040be:	461a      	mov	r2, r3
 80040c0:	2300      	movs	r3, #0
 80040c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d0:	461a      	mov	r2, r3
 80040d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	3301      	adds	r3, #1
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d3b7      	bcc.n	8004056 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e043      	b.n	8004174 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004102:	d118      	bne.n	8004136 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004116:	461a      	mov	r2, r3
 8004118:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e013      	b.n	8004148 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412c:	461a      	mov	r2, r3
 800412e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	e008      	b.n	8004148 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004142:	461a      	mov	r2, r3
 8004144:	2300      	movs	r3, #0
 8004146:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004154:	461a      	mov	r2, r3
 8004156:	2300      	movs	r3, #0
 8004158:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004166:	461a      	mov	r2, r3
 8004168:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800416c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3301      	adds	r3, #1
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	429a      	cmp	r2, r3
 800417a:	d3b7      	bcc.n	80040ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800418a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800418e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800419c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f043 0210 	orr.w	r2, r3, #16
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <USB_DevInit+0x2c4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f043 0208 	orr.w	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d107      	bne.n	80041e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041f0:	b004      	add	sp, #16
 80041f2:	4770      	bx	lr
 80041f4:	803c3800 	.word	0x803c3800

080041f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3301      	adds	r3, #1
 800420a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4a13      	ldr	r2, [pc, #76]	; (800425c <USB_FlushTxFifo+0x64>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d901      	bls.n	8004218 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e01b      	b.n	8004250 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	daf2      	bge.n	8004206 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	019b      	lsls	r3, r3, #6
 8004228:	f043 0220 	orr.w	r2, r3, #32
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a08      	ldr	r2, [pc, #32]	; (800425c <USB_FlushTxFifo+0x64>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e006      	b.n	8004250 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b20      	cmp	r3, #32
 800424c:	d0f0      	beq.n	8004230 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	00030d40 	.word	0x00030d40

08004260 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4a11      	ldr	r2, [pc, #68]	; (80042bc <USB_FlushRxFifo+0x5c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e018      	b.n	80042b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	daf2      	bge.n	800426c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2210      	movs	r2, #16
 800428e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3301      	adds	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4a08      	ldr	r2, [pc, #32]	; (80042bc <USB_FlushRxFifo+0x5c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e006      	b.n	80042b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	d0f0      	beq.n	8004290 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	00030d40 	.word	0x00030d40

080042c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	68f9      	ldr	r1, [r7, #12]
 80042dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e0:	4313      	orrs	r3, r2
 80042e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b087      	sub	sp, #28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 0306 	and.w	r3, r3, #6
 800430a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004312:	2300      	movs	r3, #0
 8004314:	75fb      	strb	r3, [r7, #23]
 8004316:	e00a      	b.n	800432e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d002      	beq.n	8004324 <USB_GetDevSpeed+0x32>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b06      	cmp	r3, #6
 8004322:	d102      	bne.n	800432a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004324:	2302      	movs	r3, #2
 8004326:	75fb      	strb	r3, [r7, #23]
 8004328:	e001      	b.n	800432e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800432a:	230f      	movs	r3, #15
 800432c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800432e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004330:	4618      	mov	r0, r3
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	785b      	ldrb	r3, [r3, #1]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d13a      	bne.n	80043ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	b29b      	uxth	r3, r3
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004376:	4313      	orrs	r3, r2
 8004378:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d155      	bne.n	800443c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	791b      	ldrb	r3, [r3, #4]
 80043aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	059b      	lsls	r3, r3, #22
 80043b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043b4:	4313      	orrs	r3, r2
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	e036      	b.n	800443c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	2101      	movs	r1, #1
 80043e0:	fa01 f303 	lsl.w	r3, r1, r3
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	68f9      	ldr	r1, [r7, #12]
 80043e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d11a      	bne.n	800443c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	791b      	ldrb	r3, [r3, #4]
 8004420:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004422:	430b      	orrs	r3, r1
 8004424:	4313      	orrs	r3, r2
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	0151      	lsls	r1, r2, #5
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	440a      	add	r2, r1
 800442e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	785b      	ldrb	r3, [r3, #1]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d161      	bne.n	800452c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800447a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800447e:	d11f      	bne.n	80044c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	0151      	lsls	r1, r2, #5
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	440a      	add	r2, r1
 8004496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800449a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800449e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	0151      	lsls	r1, r2, #5
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	440a      	add	r2, r1
 80044b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	2101      	movs	r1, #1
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	68f9      	ldr	r1, [r7, #12]
 80044dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e0:	4013      	ands	r3, r2
 80044e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004504:	4013      	ands	r3, r2
 8004506:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	0159      	lsls	r1, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	440b      	add	r3, r1
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	4619      	mov	r1, r3
 8004524:	4b35      	ldr	r3, [pc, #212]	; (80045fc <USB_DeactivateEndpoint+0x1b0>)
 8004526:	4013      	ands	r3, r2
 8004528:	600b      	str	r3, [r1, #0]
 800452a:	e060      	b.n	80045ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800453e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004542:	d11f      	bne.n	8004584 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	0151      	lsls	r1, r2, #5
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	440a      	add	r2, r1
 800455a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800455e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004562:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	0151      	lsls	r1, r2, #5
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	440a      	add	r2, r1
 800457a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800457e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004582:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	2101      	movs	r1, #1
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	041b      	lsls	r3, r3, #16
 800459c:	43db      	mvns	r3, r3
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a4:	4013      	ands	r3, r2
 80045a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	2101      	movs	r1, #1
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	041b      	lsls	r3, r3, #16
 80045c0:	43db      	mvns	r3, r3
 80045c2:	68f9      	ldr	r1, [r7, #12]
 80045c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c8:	4013      	ands	r3, r2
 80045ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	0159      	lsls	r1, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	440b      	add	r3, r1
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	4619      	mov	r1, r3
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <USB_DeactivateEndpoint+0x1b4>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	ec337800 	.word	0xec337800
 8004600:	eff37800 	.word	0xeff37800

08004604 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af02      	add	r7, sp, #8
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2b01      	cmp	r3, #1
 8004622:	f040 815c 	bne.w	80048de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d132      	bne.n	8004694 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	0151      	lsls	r1, r2, #5
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	440a      	add	r2, r1
 8004644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004648:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800464c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004650:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	0151      	lsls	r1, r2, #5
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	440a      	add	r2, r1
 8004688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468c:	0cdb      	lsrs	r3, r3, #19
 800468e:	04db      	lsls	r3, r3, #19
 8004690:	6113      	str	r3, [r2, #16]
 8004692:	e074      	b.n	800477e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ae:	0cdb      	lsrs	r3, r3, #19
 80046b0:	04db      	lsls	r3, r3, #19
 80046b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6999      	ldr	r1, [r3, #24]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	440b      	add	r3, r1
 80046f0:	1e59      	subs	r1, r3, #1
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046fc:	4b9d      	ldr	r3, [pc, #628]	; (8004974 <USB_EPStartXfer+0x370>)
 80046fe:	400b      	ands	r3, r1
 8004700:	69b9      	ldr	r1, [r7, #24]
 8004702:	0148      	lsls	r0, r1, #5
 8004704:	69f9      	ldr	r1, [r7, #28]
 8004706:	4401      	add	r1, r0
 8004708:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800470c:	4313      	orrs	r3, r2
 800470e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004726:	69b9      	ldr	r1, [r7, #24]
 8004728:	0148      	lsls	r0, r1, #5
 800472a:	69f9      	ldr	r1, [r7, #28]
 800472c:	4401      	add	r1, r0
 800472e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004732:	4313      	orrs	r3, r2
 8004734:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	791b      	ldrb	r3, [r3, #4]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d11f      	bne.n	800477e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004758:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800475c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800477c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d14b      	bne.n	800481c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	461a      	mov	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	791b      	ldrb	r3, [r3, #4]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d128      	bne.n	80047fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d110      	bne.n	80047da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	0151      	lsls	r1, r2, #5
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	440a      	add	r2, r1
 80047ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	e00f      	b.n	80047fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	0151      	lsls	r1, r2, #5
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	440a      	add	r2, r1
 80047f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	0151      	lsls	r1, r2, #5
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	440a      	add	r2, r1
 8004810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004814:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e133      	b.n	8004a84 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	440a      	add	r2, r1
 8004832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004836:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800483a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	791b      	ldrb	r3, [r3, #4]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d015      	beq.n	8004870 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 811b 	beq.w	8004a84 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	2101      	movs	r1, #1
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	69f9      	ldr	r1, [r7, #28]
 8004866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800486a:	4313      	orrs	r3, r2
 800486c:	634b      	str	r3, [r1, #52]	; 0x34
 800486e:	e109      	b.n	8004a84 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d110      	bne.n	80048a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	e00f      	b.n	80048c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	0151      	lsls	r1, r2, #5
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	440a      	add	r2, r1
 80048b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6919      	ldr	r1, [r3, #16]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	781a      	ldrb	r2, [r3, #0]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	b298      	uxth	r0, r3
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	4603      	mov	r3, r0
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fade 	bl	8004e98 <USB_WritePacket>
 80048dc:	e0d2      	b.n	8004a84 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f8:	0cdb      	lsrs	r3, r3, #19
 80048fa:	04db      	lsls	r3, r3, #19
 80048fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	0151      	lsls	r1, r2, #5
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	440a      	add	r2, r1
 8004914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004918:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800491c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004920:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d126      	bne.n	8004978 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004940:	69b9      	ldr	r1, [r7, #24]
 8004942:	0148      	lsls	r0, r1, #5
 8004944:	69f9      	ldr	r1, [r7, #28]
 8004946:	4401      	add	r1, r0
 8004948:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800494c:	4313      	orrs	r3, r2
 800494e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	0151      	lsls	r1, r2, #5
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	440a      	add	r2, r1
 8004966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800496a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800496e:	6113      	str	r3, [r2, #16]
 8004970:	e03a      	b.n	80049e8 <USB_EPStartXfer+0x3e4>
 8004972:	bf00      	nop
 8004974:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4413      	add	r3, r2
 8004982:	1e5a      	subs	r2, r3, #1
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	8afa      	ldrh	r2, [r7, #22]
 8004994:	fb03 f202 	mul.w	r2, r3, r2
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	8afb      	ldrh	r3, [r7, #22]
 80049ac:	04d9      	lsls	r1, r3, #19
 80049ae:	4b38      	ldr	r3, [pc, #224]	; (8004a90 <USB_EPStartXfer+0x48c>)
 80049b0:	400b      	ands	r3, r1
 80049b2:	69b9      	ldr	r1, [r7, #24]
 80049b4:	0148      	lsls	r0, r1, #5
 80049b6:	69f9      	ldr	r1, [r7, #28]
 80049b8:	4401      	add	r1, r0
 80049ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049be:	4313      	orrs	r3, r2
 80049c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	0148      	lsls	r0, r1, #5
 80049dc:	69f9      	ldr	r1, [r7, #28]
 80049de:	4401      	add	r1, r0
 80049e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049e4:	4313      	orrs	r3, r2
 80049e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d10d      	bne.n	8004a0a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	6919      	ldr	r1, [r3, #16]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	460a      	mov	r2, r1
 8004a08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	791b      	ldrb	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d128      	bne.n	8004a64 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d110      	bne.n	8004a44 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	0151      	lsls	r1, r2, #5
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	440a      	add	r2, r1
 8004a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e00f      	b.n	8004a64 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	1ff80000 	.word	0x1ff80000

08004a94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	f040 80ce 	bne.w	8004c52 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d132      	bne.n	8004b24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004adc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ae0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1c:	0cdb      	lsrs	r3, r3, #19
 8004b1e:	04db      	lsls	r3, r3, #19
 8004b20:	6113      	str	r3, [r2, #16]
 8004b22:	e04e      	b.n	8004bc2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b3e:	0cdb      	lsrs	r3, r3, #19
 8004b40:	04db      	lsls	r3, r3, #19
 8004b42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	0151      	lsls	r1, r2, #5
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	440a      	add	r2, r1
 8004b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d903      	bls.n	8004b7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb2:	6939      	ldr	r1, [r7, #16]
 8004bb4:	0148      	lsls	r0, r1, #5
 8004bb6:	6979      	ldr	r1, [r7, #20]
 8004bb8:	4401      	add	r1, r0
 8004bba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d11e      	bne.n	8004c06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	e097      	b.n	8004d36 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8083 	beq.w	8004d36 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	2101      	movs	r1, #1
 8004c42:	fa01 f303 	lsl.w	r3, r1, r3
 8004c46:	6979      	ldr	r1, [r7, #20]
 8004c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	634b      	str	r3, [r1, #52]	; 0x34
 8004c50:	e071      	b.n	8004d36 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c6c:	0cdb      	lsrs	r3, r3, #19
 8004c6e:	04db      	lsls	r3, r3, #19
 8004c70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ccc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce4:	6939      	ldr	r1, [r7, #16]
 8004ce6:	0148      	lsls	r0, r1, #5
 8004ce8:	6979      	ldr	r1, [r7, #20]
 8004cea:	4401      	add	r1, r0
 8004cec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d10d      	bne.n	8004d16 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d009      	beq.n	8004d16 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6919      	ldr	r1, [r3, #16]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	460a      	mov	r2, r1
 8004d14:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	785b      	ldrb	r3, [r3, #1]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d14a      	bne.n	8004df8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d7a:	f040 8086 	bne.w	8004e8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004da0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	7812      	ldrb	r2, [r2, #0]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f242 7210 	movw	r2, #10000	; 0x2710
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d902      	bls.n	8004ddc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	75fb      	strb	r3, [r7, #23]
          break;
 8004dda:	e056      	b.n	8004e8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004df4:	d0e7      	beq.n	8004dc6 <USB_EPStopXfer+0x82>
 8004df6:	e048      	b.n	8004e8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e10:	d13b      	bne.n	8004e8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	7812      	ldrb	r2, [r2, #0]
 8004e26:	0151      	lsls	r1, r2, #5
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d902      	bls.n	8004e70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e6e:	e00c      	b.n	8004e8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e88:	d0e7      	beq.n	8004e5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	71fb      	strb	r3, [r7, #7]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004eb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d123      	bne.n	8004f06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ebe:	88bb      	ldrh	r3, [r7, #4]
 8004ec0:	3303      	adds	r3, #3
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	e018      	b.n	8004efe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	031a      	lsls	r2, r3, #12
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed8:	461a      	mov	r2, r3
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	3301      	adds	r3, #1
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d3e2      	bcc.n	8004ecc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3724      	adds	r7, #36	; 0x24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b08b      	sub	sp, #44	; 0x2c
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	089b      	lsrs	r3, r3, #2
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	623b      	str	r3, [r7, #32]
 8004f3e:	e014      	b.n	8004f6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	3301      	adds	r3, #1
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	3301      	adds	r3, #1
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	3301      	adds	r3, #1
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	3301      	adds	r3, #1
 8004f68:	623b      	str	r3, [r7, #32]
 8004f6a:	6a3a      	ldr	r2, [r7, #32]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d3e6      	bcc.n	8004f40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f72:	8bfb      	ldrh	r3, [r7, #30]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01e      	beq.n	8004fb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f82:	461a      	mov	r2, r3
 8004f84:	f107 0310 	add.w	r3, r7, #16
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	701a      	strb	r2, [r3, #0]
      i++;
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004faa:	8bfb      	ldrh	r3, [r7, #30]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fb0:	8bfb      	ldrh	r3, [r7, #30]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1ea      	bne.n	8004f8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	372c      	adds	r7, #44	; 0x2c
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	785b      	ldrb	r3, [r3, #1]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d12c      	bne.n	800503a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	db12      	blt.n	8005018 <USB_EPSetStall+0x54>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00f      	beq.n	8005018 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	0151      	lsls	r1, r2, #5
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	440a      	add	r2, r1
 800500e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005012:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005016:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	0151      	lsls	r1, r2, #5
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	440a      	add	r2, r1
 800502e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e02b      	b.n	8005092 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	db12      	blt.n	8005072 <USB_EPSetStall+0xae>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00f      	beq.n	8005072 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	0151      	lsls	r1, r2, #5
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	440a      	add	r2, r1
 8005068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800506c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005070:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	440a      	add	r2, r1
 8005088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800508c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005090:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d128      	bne.n	800510e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	791b      	ldrb	r3, [r3, #4]
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d003      	beq.n	80050ec <USB_EPClearStall+0x4c>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	791b      	ldrb	r3, [r3, #4]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d138      	bne.n	800515e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	440a      	add	r2, r1
 8005102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	e027      	b.n	800515e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	0151      	lsls	r1, r2, #5
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	440a      	add	r2, r1
 8005124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005128:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800512c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	791b      	ldrb	r3, [r3, #4]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d003      	beq.n	800513e <USB_EPClearStall+0x9e>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	791b      	ldrb	r3, [r3, #4]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d10f      	bne.n	800515e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	440a      	add	r2, r1
 8005154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800518e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80051a0:	68f9      	ldr	r1, [r7, #12]
 80051a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051a6:	4313      	orrs	r3, r2
 80051a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e6:	f023 0302 	bic.w	r3, r3, #2
 80051ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005214:	f023 0303 	bic.w	r3, r3, #3
 8005218:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005228:	f043 0302 	orr.w	r3, r3, #2
 800522c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4013      	ands	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005254:	68fb      	ldr	r3, [r7, #12]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	4013      	ands	r3, r2
 8005284:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	0c1b      	lsrs	r3, r3, #16
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	4013      	ands	r3, r2
 80052b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	b29b      	uxth	r3, r3
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	4013      	ands	r3, r2
 80052f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052f8:	68bb      	ldr	r3, [r7, #8]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005306:	b480      	push	{r7}
 8005308:	b087      	sub	sp, #28
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800532a:	78fb      	ldrb	r3, [r7, #3]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	fa22 f303 	lsr.w	r3, r2, r3
 8005336:	01db      	lsls	r3, r3, #7
 8005338:	b2db      	uxtb	r3, r3
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4013      	ands	r3, r2
 8005352:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005354:	68bb      	ldr	r3, [r7, #8]
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f003 0301 	and.w	r3, r3, #1
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005398:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800539c:	f023 0307 	bic.w	r3, r3, #7
 80053a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	460b      	mov	r3, r1
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	333c      	adds	r3, #60	; 0x3c
 80053da:	3304      	adds	r3, #4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4a26      	ldr	r2, [pc, #152]	; (800547c <USB_EP0_OutStart+0xb8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d90a      	bls.n	80053fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f8:	d101      	bne.n	80053fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e037      	b.n	800546e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	461a      	mov	r2, r3
 8005406:	2300      	movs	r3, #0
 8005408:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005418:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800541c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542c:	f043 0318 	orr.w	r3, r3, #24
 8005430:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005440:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005444:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005446:	7afb      	ldrb	r3, [r7, #11]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d10f      	bne.n	800546c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	461a      	mov	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005466:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800546a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	4f54300a 	.word	0x4f54300a

08005480 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3301      	adds	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a13      	ldr	r2, [pc, #76]	; (80054e4 <USB_CoreReset+0x64>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d901      	bls.n	800549e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e01b      	b.n	80054d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	daf2      	bge.n	800548c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f043 0201 	orr.w	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <USB_CoreReset+0x64>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d901      	bls.n	80054c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e006      	b.n	80054d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d0f0      	beq.n	80054b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	00030d40 	.word	0x00030d40

080054e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80054f8:	f002 fcaa 	bl	8007e50 <USBD_static_malloc>
 80054fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d109      	bne.n	8005518 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	32b0      	adds	r2, #176	; 0xb0
 800550e:	2100      	movs	r1, #0
 8005510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005514:	2302      	movs	r3, #2
 8005516:	e0d4      	b.n	80056c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005518:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800551c:	2100      	movs	r1, #0
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f002 fd0c 	bl	8007f3c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	32b0      	adds	r2, #176	; 0xb0
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	32b0      	adds	r2, #176	; 0xb0
 800553e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7c1b      	ldrb	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d138      	bne.n	80055c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005550:	4b5e      	ldr	r3, [pc, #376]	; (80056cc <USBD_CDC_Init+0x1e4>)
 8005552:	7819      	ldrb	r1, [r3, #0]
 8005554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005558:	2202      	movs	r2, #2
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f002 fb55 	bl	8007c0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005560:	4b5a      	ldr	r3, [pc, #360]	; (80056cc <USBD_CDC_Init+0x1e4>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f003 020f 	and.w	r2, r3, #15
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3324      	adds	r3, #36	; 0x24
 8005576:	2201      	movs	r2, #1
 8005578:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800557a:	4b55      	ldr	r3, [pc, #340]	; (80056d0 <USBD_CDC_Init+0x1e8>)
 800557c:	7819      	ldrb	r1, [r3, #0]
 800557e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005582:	2202      	movs	r2, #2
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f002 fb40 	bl	8007c0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800558a:	4b51      	ldr	r3, [pc, #324]	; (80056d0 <USBD_CDC_Init+0x1e8>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f003 020f 	and.w	r2, r3, #15
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055a2:	2201      	movs	r2, #1
 80055a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80055a6:	4b4b      	ldr	r3, [pc, #300]	; (80056d4 <USBD_CDC_Init+0x1ec>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	f003 020f 	and.w	r2, r3, #15
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	3326      	adds	r3, #38	; 0x26
 80055bc:	2210      	movs	r2, #16
 80055be:	801a      	strh	r2, [r3, #0]
 80055c0:	e035      	b.n	800562e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055c2:	4b42      	ldr	r3, [pc, #264]	; (80056cc <USBD_CDC_Init+0x1e4>)
 80055c4:	7819      	ldrb	r1, [r3, #0]
 80055c6:	2340      	movs	r3, #64	; 0x40
 80055c8:	2202      	movs	r2, #2
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f002 fb1d 	bl	8007c0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055d0:	4b3e      	ldr	r3, [pc, #248]	; (80056cc <USBD_CDC_Init+0x1e4>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	f003 020f 	and.w	r2, r3, #15
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	3324      	adds	r3, #36	; 0x24
 80055e6:	2201      	movs	r2, #1
 80055e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055ea:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <USBD_CDC_Init+0x1e8>)
 80055ec:	7819      	ldrb	r1, [r3, #0]
 80055ee:	2340      	movs	r3, #64	; 0x40
 80055f0:	2202      	movs	r2, #2
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f002 fb09 	bl	8007c0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055f8:	4b35      	ldr	r3, [pc, #212]	; (80056d0 <USBD_CDC_Init+0x1e8>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 020f 	and.w	r2, r3, #15
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005610:	2201      	movs	r2, #1
 8005612:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005614:	4b2f      	ldr	r3, [pc, #188]	; (80056d4 <USBD_CDC_Init+0x1ec>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f003 020f 	and.w	r2, r3, #15
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	3326      	adds	r3, #38	; 0x26
 800562a:	2210      	movs	r2, #16
 800562c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800562e:	4b29      	ldr	r3, [pc, #164]	; (80056d4 <USBD_CDC_Init+0x1ec>)
 8005630:	7819      	ldrb	r1, [r3, #0]
 8005632:	2308      	movs	r3, #8
 8005634:	2203      	movs	r2, #3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f002 fae7 	bl	8007c0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800563c:	4b25      	ldr	r3, [pc, #148]	; (80056d4 <USBD_CDC_Init+0x1ec>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f003 020f 	and.w	r2, r3, #15
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	440b      	add	r3, r1
 8005650:	3324      	adds	r3, #36	; 0x24
 8005652:	2201      	movs	r2, #1
 8005654:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	33b0      	adds	r3, #176	; 0xb0
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800568c:	2302      	movs	r3, #2
 800568e:	e018      	b.n	80056c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	7c1b      	ldrb	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005698:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <USBD_CDC_Init+0x1e8>)
 800569a:	7819      	ldrb	r1, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f002 fb9e 	bl	8007de8 <USBD_LL_PrepareReceive>
 80056ac:	e008      	b.n	80056c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056ae:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <USBD_CDC_Init+0x1e8>)
 80056b0:	7819      	ldrb	r1, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056b8:	2340      	movs	r3, #64	; 0x40
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f002 fb94 	bl	8007de8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000093 	.word	0x20000093
 80056d0:	20000094 	.word	0x20000094
 80056d4:	20000095 	.word	0x20000095

080056d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80056e4:	4b3a      	ldr	r3, [pc, #232]	; (80057d0 <USBD_CDC_DeInit+0xf8>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f002 fab3 	bl	8007c56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80056f0:	4b37      	ldr	r3, [pc, #220]	; (80057d0 <USBD_CDC_DeInit+0xf8>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	f003 020f 	and.w	r2, r3, #15
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	3324      	adds	r3, #36	; 0x24
 8005706:	2200      	movs	r2, #0
 8005708:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800570a:	4b32      	ldr	r3, [pc, #200]	; (80057d4 <USBD_CDC_DeInit+0xfc>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f002 faa0 	bl	8007c56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005716:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <USBD_CDC_DeInit+0xfc>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	f003 020f 	and.w	r2, r3, #15
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800572e:	2200      	movs	r2, #0
 8005730:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005732:	4b29      	ldr	r3, [pc, #164]	; (80057d8 <USBD_CDC_DeInit+0x100>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f002 fa8c 	bl	8007c56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800573e:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <USBD_CDC_DeInit+0x100>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	f003 020f 	and.w	r2, r3, #15
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	3324      	adds	r3, #36	; 0x24
 8005754:	2200      	movs	r2, #0
 8005756:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005758:	4b1f      	ldr	r3, [pc, #124]	; (80057d8 <USBD_CDC_DeInit+0x100>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f003 020f 	and.w	r2, r3, #15
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	3326      	adds	r3, #38	; 0x26
 800576e:	2200      	movs	r2, #0
 8005770:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	32b0      	adds	r2, #176	; 0xb0
 800577c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01f      	beq.n	80057c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	33b0      	adds	r3, #176	; 0xb0
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	32b0      	adds	r2, #176	; 0xb0
 80057a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f002 fb60 	bl	8007e6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	32b0      	adds	r2, #176	; 0xb0
 80057b6:	2100      	movs	r1, #0
 80057b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000093 	.word	0x20000093
 80057d4:	20000094 	.word	0x20000094
 80057d8:	20000095 	.word	0x20000095

080057dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	32b0      	adds	r2, #176	; 0xb0
 80057f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005808:	2303      	movs	r3, #3
 800580a:	e0bf      	b.n	800598c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005814:	2b00      	cmp	r3, #0
 8005816:	d050      	beq.n	80058ba <USBD_CDC_Setup+0xde>
 8005818:	2b20      	cmp	r3, #32
 800581a:	f040 80af 	bne.w	800597c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	88db      	ldrh	r3, [r3, #6]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d03a      	beq.n	800589c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	b25b      	sxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	da1b      	bge.n	8005868 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	33b0      	adds	r3, #176	; 0xb0
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005846:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	88d2      	ldrh	r2, [r2, #6]
 800584c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	88db      	ldrh	r3, [r3, #6]
 8005852:	2b07      	cmp	r3, #7
 8005854:	bf28      	it	cs
 8005856:	2307      	movcs	r3, #7
 8005858:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	89fa      	ldrh	r2, [r7, #14]
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 fd89 	bl	8007378 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005866:	e090      	b.n	800598a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	785a      	ldrb	r2, [r3, #1]
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	88db      	ldrh	r3, [r3, #6]
 8005876:	2b3f      	cmp	r3, #63	; 0x3f
 8005878:	d803      	bhi.n	8005882 <USBD_CDC_Setup+0xa6>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	88db      	ldrh	r3, [r3, #6]
 800587e:	b2da      	uxtb	r2, r3
 8005880:	e000      	b.n	8005884 <USBD_CDC_Setup+0xa8>
 8005882:	2240      	movs	r2, #64	; 0x40
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800588a:	6939      	ldr	r1, [r7, #16]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005892:	461a      	mov	r2, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 fd9b 	bl	80073d0 <USBD_CtlPrepareRx>
      break;
 800589a:	e076      	b.n	800598a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	33b0      	adds	r3, #176	; 0xb0
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	7850      	ldrb	r0, [r2, #1]
 80058b2:	2200      	movs	r2, #0
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	4798      	blx	r3
      break;
 80058b8:	e067      	b.n	800598a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	785b      	ldrb	r3, [r3, #1]
 80058be:	2b0b      	cmp	r3, #11
 80058c0:	d851      	bhi.n	8005966 <USBD_CDC_Setup+0x18a>
 80058c2:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <USBD_CDC_Setup+0xec>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	080058f9 	.word	0x080058f9
 80058cc:	08005975 	.word	0x08005975
 80058d0:	08005967 	.word	0x08005967
 80058d4:	08005967 	.word	0x08005967
 80058d8:	08005967 	.word	0x08005967
 80058dc:	08005967 	.word	0x08005967
 80058e0:	08005967 	.word	0x08005967
 80058e4:	08005967 	.word	0x08005967
 80058e8:	08005967 	.word	0x08005967
 80058ec:	08005967 	.word	0x08005967
 80058f0:	08005923 	.word	0x08005923
 80058f4:	0800594d 	.word	0x0800594d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b03      	cmp	r3, #3
 8005902:	d107      	bne.n	8005914 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005904:	f107 030a 	add.w	r3, r7, #10
 8005908:	2202      	movs	r2, #2
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 fd33 	bl	8007378 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005912:	e032      	b.n	800597a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 fcbd 	bl	8007296 <USBD_CtlError>
            ret = USBD_FAIL;
 800591c:	2303      	movs	r3, #3
 800591e:	75fb      	strb	r3, [r7, #23]
          break;
 8005920:	e02b      	b.n	800597a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b03      	cmp	r3, #3
 800592c:	d107      	bne.n	800593e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800592e:	f107 030d 	add.w	r3, r7, #13
 8005932:	2201      	movs	r2, #1
 8005934:	4619      	mov	r1, r3
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f001 fd1e 	bl	8007378 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800593c:	e01d      	b.n	800597a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 fca8 	bl	8007296 <USBD_CtlError>
            ret = USBD_FAIL;
 8005946:	2303      	movs	r3, #3
 8005948:	75fb      	strb	r3, [r7, #23]
          break;
 800594a:	e016      	b.n	800597a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b03      	cmp	r3, #3
 8005956:	d00f      	beq.n	8005978 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 fc9b 	bl	8007296 <USBD_CtlError>
            ret = USBD_FAIL;
 8005960:	2303      	movs	r3, #3
 8005962:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005964:	e008      	b.n	8005978 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 fc94 	bl	8007296 <USBD_CtlError>
          ret = USBD_FAIL;
 800596e:	2303      	movs	r3, #3
 8005970:	75fb      	strb	r3, [r7, #23]
          break;
 8005972:	e002      	b.n	800597a <USBD_CDC_Setup+0x19e>
          break;
 8005974:	bf00      	nop
 8005976:	e008      	b.n	800598a <USBD_CDC_Setup+0x1ae>
          break;
 8005978:	bf00      	nop
      }
      break;
 800597a:	e006      	b.n	800598a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 fc89 	bl	8007296 <USBD_CtlError>
      ret = USBD_FAIL;
 8005984:	2303      	movs	r3, #3
 8005986:	75fb      	strb	r3, [r7, #23]
      break;
 8005988:	bf00      	nop
  }

  return (uint8_t)ret;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80059a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	32b0      	adds	r2, #176	; 0xb0
 80059b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e065      	b.n	8005a8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	32b0      	adds	r2, #176	; 0xb0
 80059c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	f003 020f 	and.w	r2, r3, #15
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	3318      	adds	r3, #24
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d02f      	beq.n	8005a48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	f003 020f 	and.w	r2, r3, #15
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	3318      	adds	r3, #24
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	f003 010f 	and.w	r1, r3, #15
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	460b      	mov	r3, r1
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	440b      	add	r3, r1
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4403      	add	r3, r0
 8005a10:	3348      	adds	r3, #72	; 0x48
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
 8005a1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d112      	bne.n	8005a48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	f003 020f 	and.w	r2, r3, #15
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	3318      	adds	r3, #24
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a3a:	78f9      	ldrb	r1, [r7, #3]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2200      	movs	r2, #0
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f002 f9b0 	bl	8007da6 <USBD_LL_Transmit>
 8005a46:	e01f      	b.n	8005a88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	33b0      	adds	r3, #176	; 0xb0
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d010      	beq.n	8005a88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	33b0      	adds	r3, #176	; 0xb0
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005a84:	78fa      	ldrb	r2, [r7, #3]
 8005a86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	32b0      	adds	r2, #176	; 0xb0
 8005aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	32b0      	adds	r2, #176	; 0xb0
 8005ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e01a      	b.n	8005afa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f002 f9ae 	bl	8007e2a <USBD_LL_GetRxDataSize>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	33b0      	adds	r3, #176	; 0xb0
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005af4:	4611      	mov	r1, r2
 8005af6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	32b0      	adds	r2, #176	; 0xb0
 8005b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e025      	b.n	8005b70 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	33b0      	adds	r3, #176	; 0xb0
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01a      	beq.n	8005b6e <USBD_CDC_EP0_RxReady+0x6c>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b3e:	2bff      	cmp	r3, #255	; 0xff
 8005b40:	d015      	beq.n	8005b6e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	33b0      	adds	r3, #176	; 0xb0
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b5a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b62:	b292      	uxth	r2, r2
 8005b64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	22ff      	movs	r2, #255	; 0xff
 8005b6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b80:	2182      	movs	r1, #130	; 0x82
 8005b82:	4818      	ldr	r0, [pc, #96]	; (8005be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b84:	f000 fd4f 	bl	8006626 <USBD_GetEpDesc>
 8005b88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	4815      	ldr	r0, [pc, #84]	; (8005be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b8e:	f000 fd4a 	bl	8006626 <USBD_GetEpDesc>
 8005b92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b94:	2181      	movs	r1, #129	; 0x81
 8005b96:	4813      	ldr	r0, [pc, #76]	; (8005be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b98:	f000 fd45 	bl	8006626 <USBD_GetEpDesc>
 8005b9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2210      	movs	r2, #16
 8005ba8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d006      	beq.n	8005bbe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb8:	711a      	strb	r2, [r3, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d006      	beq.n	8005bd2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bcc:	711a      	strb	r2, [r3, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2243      	movs	r2, #67	; 0x43
 8005bd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bd8:	4b02      	ldr	r3, [pc, #8]	; (8005be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000050 	.word	0x20000050

08005be8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bf0:	2182      	movs	r1, #130	; 0x82
 8005bf2:	4818      	ldr	r0, [pc, #96]	; (8005c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bf4:	f000 fd17 	bl	8006626 <USBD_GetEpDesc>
 8005bf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	4815      	ldr	r0, [pc, #84]	; (8005c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bfe:	f000 fd12 	bl	8006626 <USBD_GetEpDesc>
 8005c02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c04:	2181      	movs	r1, #129	; 0x81
 8005c06:	4813      	ldr	r0, [pc, #76]	; (8005c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c08:	f000 fd0d 	bl	8006626 <USBD_GetEpDesc>
 8005c0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2210      	movs	r2, #16
 8005c18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2200      	movs	r2, #0
 8005c24:	711a      	strb	r2, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f042 0202 	orr.w	r2, r2, #2
 8005c2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d006      	beq.n	8005c42 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	711a      	strb	r2, [r3, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f042 0202 	orr.w	r2, r2, #2
 8005c40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2243      	movs	r2, #67	; 0x43
 8005c46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c48:	4b02      	ldr	r3, [pc, #8]	; (8005c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20000050 	.word	0x20000050

08005c58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c60:	2182      	movs	r1, #130	; 0x82
 8005c62:	4818      	ldr	r0, [pc, #96]	; (8005cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c64:	f000 fcdf 	bl	8006626 <USBD_GetEpDesc>
 8005c68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	4815      	ldr	r0, [pc, #84]	; (8005cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c6e:	f000 fcda 	bl	8006626 <USBD_GetEpDesc>
 8005c72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c74:	2181      	movs	r1, #129	; 0x81
 8005c76:	4813      	ldr	r0, [pc, #76]	; (8005cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c78:	f000 fcd5 	bl	8006626 <USBD_GetEpDesc>
 8005c7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2210      	movs	r2, #16
 8005c88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d006      	beq.n	8005c9e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c98:	711a      	strb	r2, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d006      	beq.n	8005cb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cac:	711a      	strb	r2, [r3, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2243      	movs	r2, #67	; 0x43
 8005cb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005cb8:	4b02      	ldr	r3, [pc, #8]	; (8005cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000050 	.word	0x20000050

08005cc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	220a      	movs	r2, #10
 8005cd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cd6:	4b03      	ldr	r3, [pc, #12]	; (8005ce4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	2000000c 	.word	0x2000000c

08005ce8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e009      	b.n	8005d10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	33b0      	adds	r3, #176	; 0xb0
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	32b0      	adds	r2, #176	; 0xb0
 8005d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d36:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e008      	b.n	8005d54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	32b0      	adds	r2, #176	; 0xb0
 8005d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e004      	b.n	8005d8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	32b0      	adds	r2, #176	; 0xb0
 8005dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005db4:	2301      	movs	r3, #1
 8005db6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	32b0      	adds	r2, #176	; 0xb0
 8005dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e025      	b.n	8005e1a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d11f      	bne.n	8005e18 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005de0:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <USBD_CDC_TransmitPacket+0x88>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	f003 020f 	and.w	r2, r3, #15
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4403      	add	r3, r0
 8005dfa:	3318      	adds	r3, #24
 8005dfc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <USBD_CDC_TransmitPacket+0x88>)
 8005e00:	7819      	ldrb	r1, [r3, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 ffc9 	bl	8007da6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000093 	.word	0x20000093

08005e28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	32b0      	adds	r2, #176	; 0xb0
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	32b0      	adds	r2, #176	; 0xb0
 8005e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e018      	b.n	8005e88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	7c1b      	ldrb	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10a      	bne.n	8005e74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <USBD_CDC_ReceivePacket+0x68>)
 8005e60:	7819      	ldrb	r1, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f001 ffbb 	bl	8007de8 <USBD_LL_PrepareReceive>
 8005e72:	e008      	b.n	8005e86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <USBD_CDC_ReceivePacket+0x68>)
 8005e76:	7819      	ldrb	r1, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e7e:	2340      	movs	r3, #64	; 0x40
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f001 ffb1 	bl	8007de8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20000094 	.word	0x20000094

08005e94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e01f      	b.n	8005eec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	79fa      	ldrb	r2, [r7, #7]
 8005ede:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f001 fe2b 	bl	8007b3c <USBD_LL_Init>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e025      	b.n	8005f58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	32ae      	adds	r2, #174	; 0xae
 8005f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00f      	beq.n	8005f48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	32ae      	adds	r2, #174	; 0xae
 8005f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	f107 020e 	add.w	r2, r7, #14
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4798      	blx	r3
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 fe33 	bl	8007bd4 <USBD_LL_Start>
 8005f6e:	4603      	mov	r3, r0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d009      	beq.n	8005fbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	78fa      	ldrb	r2, [r7, #3]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	4798      	blx	r3
 8005fb8:	4603      	mov	r3, r0
 8005fba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	4798      	blx	r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005fec:	2303      	movs	r3, #3
 8005fee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	4618      	mov	r0, r3
 800600e:	f001 f908 	bl	8007222 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	2b02      	cmp	r3, #2
 8006034:	d01a      	beq.n	800606c <USBD_LL_SetupStage+0x72>
 8006036:	2b02      	cmp	r3, #2
 8006038:	d822      	bhi.n	8006080 <USBD_LL_SetupStage+0x86>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <USBD_LL_SetupStage+0x4a>
 800603e:	2b01      	cmp	r3, #1
 8006040:	d00a      	beq.n	8006058 <USBD_LL_SetupStage+0x5e>
 8006042:	e01d      	b.n	8006080 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fb5f 	bl	8006710 <USBD_StdDevReq>
 8006052:	4603      	mov	r3, r0
 8006054:	73fb      	strb	r3, [r7, #15]
      break;
 8006056:	e020      	b.n	800609a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fbc7 	bl	80067f4 <USBD_StdItfReq>
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
      break;
 800606a:	e016      	b.n	800609a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fc29 	bl	80068cc <USBD_StdEPReq>
 800607a:	4603      	mov	r3, r0
 800607c:	73fb      	strb	r3, [r7, #15]
      break;
 800607e:	e00c      	b.n	800609a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006086:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800608a:	b2db      	uxtb	r3, r3
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 fe00 	bl	8007c94 <USBD_LL_StallEP>
 8006094:	4603      	mov	r3, r0
 8006096:	73fb      	strb	r3, [r7, #15]
      break;
 8006098:	bf00      	nop
  }

  return ret;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	460b      	mov	r3, r1
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80060b6:	7afb      	ldrb	r3, [r7, #11]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d16e      	bne.n	800619a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	f040 8098 	bne.w	8006200 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d913      	bls.n	8006104 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	1ad2      	subs	r2, r2, r3
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	4293      	cmp	r3, r2
 80060f4:	bf28      	it	cs
 80060f6:	4613      	movcs	r3, r2
 80060f8:	461a      	mov	r2, r3
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f001 f984 	bl	800740a <USBD_CtlContinueRx>
 8006102:	e07d      	b.n	8006200 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800610a:	f003 031f 	and.w	r3, r3, #31
 800610e:	2b02      	cmp	r3, #2
 8006110:	d014      	beq.n	800613c <USBD_LL_DataOutStage+0x98>
 8006112:	2b02      	cmp	r3, #2
 8006114:	d81d      	bhi.n	8006152 <USBD_LL_DataOutStage+0xae>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <USBD_LL_DataOutStage+0x7c>
 800611a:	2b01      	cmp	r3, #1
 800611c:	d003      	beq.n	8006126 <USBD_LL_DataOutStage+0x82>
 800611e:	e018      	b.n	8006152 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	75bb      	strb	r3, [r7, #22]
            break;
 8006124:	e018      	b.n	8006158 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800612c:	b2db      	uxtb	r3, r3
 800612e:	4619      	mov	r1, r3
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fa5e 	bl	80065f2 <USBD_CoreFindIF>
 8006136:	4603      	mov	r3, r0
 8006138:	75bb      	strb	r3, [r7, #22]
            break;
 800613a:	e00d      	b.n	8006158 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006142:	b2db      	uxtb	r3, r3
 8006144:	4619      	mov	r1, r3
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fa60 	bl	800660c <USBD_CoreFindEP>
 800614c:	4603      	mov	r3, r0
 800614e:	75bb      	strb	r3, [r7, #22]
            break;
 8006150:	e002      	b.n	8006158 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	75bb      	strb	r3, [r7, #22]
            break;
 8006156:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006158:	7dbb      	ldrb	r3, [r7, #22]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d119      	bne.n	8006192 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b03      	cmp	r3, #3
 8006168:	d113      	bne.n	8006192 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800616a:	7dba      	ldrb	r2, [r7, #22]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	32ae      	adds	r2, #174	; 0xae
 8006170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00b      	beq.n	8006192 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800617a:	7dba      	ldrb	r2, [r7, #22]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006182:	7dba      	ldrb	r2, [r7, #22]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	32ae      	adds	r2, #174	; 0xae
 8006188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f001 f94a 	bl	800742c <USBD_CtlSendStatus>
 8006198:	e032      	b.n	8006200 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800619a:	7afb      	ldrb	r3, [r7, #11]
 800619c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	4619      	mov	r1, r3
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 fa31 	bl	800660c <USBD_CoreFindEP>
 80061aa:	4603      	mov	r3, r0
 80061ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061ae:	7dbb      	ldrb	r3, [r7, #22]
 80061b0:	2bff      	cmp	r3, #255	; 0xff
 80061b2:	d025      	beq.n	8006200 <USBD_LL_DataOutStage+0x15c>
 80061b4:	7dbb      	ldrb	r3, [r7, #22]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d122      	bne.n	8006200 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d117      	bne.n	80061f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80061c6:	7dba      	ldrb	r2, [r7, #22]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	32ae      	adds	r2, #174	; 0xae
 80061cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00f      	beq.n	80061f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80061d6:	7dba      	ldrb	r2, [r7, #22]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80061de:	7dba      	ldrb	r2, [r7, #22]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	32ae      	adds	r2, #174	; 0xae
 80061e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	7afa      	ldrb	r2, [r7, #11]
 80061ec:	4611      	mov	r1, r2
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	4798      	blx	r3
 80061f2:	4603      	mov	r3, r0
 80061f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
 80061fe:	e000      	b.n	8006202 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b086      	sub	sp, #24
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	460b      	mov	r3, r1
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006218:	7afb      	ldrb	r3, [r7, #11]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d16f      	bne.n	80062fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3314      	adds	r3, #20
 8006222:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800622a:	2b02      	cmp	r3, #2
 800622c:	d15a      	bne.n	80062e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	429a      	cmp	r2, r3
 8006238:	d914      	bls.n	8006264 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	1ad2      	subs	r2, r2, r3
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	461a      	mov	r2, r3
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f001 f8ac 	bl	80073ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006256:	2300      	movs	r3, #0
 8006258:	2200      	movs	r2, #0
 800625a:	2100      	movs	r1, #0
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f001 fdc3 	bl	8007de8 <USBD_LL_PrepareReceive>
 8006262:	e03f      	b.n	80062e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	429a      	cmp	r2, r3
 800626e:	d11c      	bne.n	80062aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006278:	429a      	cmp	r2, r3
 800627a:	d316      	bcc.n	80062aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006286:	429a      	cmp	r2, r3
 8006288:	d20f      	bcs.n	80062aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800628a:	2200      	movs	r2, #0
 800628c:	2100      	movs	r1, #0
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f001 f88d 	bl	80073ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800629c:	2300      	movs	r3, #0
 800629e:	2200      	movs	r2, #0
 80062a0:	2100      	movs	r1, #0
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f001 fda0 	bl	8007de8 <USBD_LL_PrepareReceive>
 80062a8:	e01c      	b.n	80062e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d10f      	bne.n	80062d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d009      	beq.n	80062d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062d6:	2180      	movs	r1, #128	; 0x80
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f001 fcdb 	bl	8007c94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f001 f8b7 	bl	8007452 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d03a      	beq.n	8006364 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7ff fe42 	bl	8005f78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062fc:	e032      	b.n	8006364 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006304:	b2db      	uxtb	r3, r3
 8006306:	4619      	mov	r1, r3
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 f97f 	bl	800660c <USBD_CoreFindEP>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	2bff      	cmp	r3, #255	; 0xff
 8006316:	d025      	beq.n	8006364 <USBD_LL_DataInStage+0x15a>
 8006318:	7dfb      	ldrb	r3, [r7, #23]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d122      	bne.n	8006364 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b03      	cmp	r3, #3
 8006328:	d11c      	bne.n	8006364 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800632a:	7dfa      	ldrb	r2, [r7, #23]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	32ae      	adds	r2, #174	; 0xae
 8006330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d014      	beq.n	8006364 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800633a:	7dfa      	ldrb	r2, [r7, #23]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006342:	7dfa      	ldrb	r2, [r7, #23]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	32ae      	adds	r2, #174	; 0xae
 8006348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	7afa      	ldrb	r2, [r7, #11]
 8006350:	4611      	mov	r1, r2
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	4798      	blx	r3
 8006356:	4603      	mov	r3, r0
 8006358:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800635a:	7dbb      	ldrb	r3, [r7, #22]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006360:	7dbb      	ldrb	r3, [r7, #22]
 8006362:	e000      	b.n	8006366 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d014      	beq.n	80063d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00e      	beq.n	80063d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6852      	ldr	r2, [r2, #4]
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	4611      	mov	r1, r2
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	4798      	blx	r3
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80063d0:	2303      	movs	r3, #3
 80063d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063d4:	2340      	movs	r3, #64	; 0x40
 80063d6:	2200      	movs	r2, #0
 80063d8:	2100      	movs	r1, #0
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f001 fc15 	bl	8007c0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2240      	movs	r2, #64	; 0x40
 80063ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063f0:	2340      	movs	r3, #64	; 0x40
 80063f2:	2200      	movs	r2, #0
 80063f4:	2180      	movs	r1, #128	; 0x80
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 fc07 	bl	8007c0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2240      	movs	r2, #64	; 0x40
 8006406:	621a      	str	r2, [r3, #32]

  return ret;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	78fa      	ldrb	r2, [r7, #3]
 8006422:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006440:	b2da      	uxtb	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2204      	movs	r2, #4
 800644c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b04      	cmp	r3, #4
 8006470:	d106      	bne.n	8006480 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006478:	b2da      	uxtb	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d110      	bne.n	80064c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	460b      	mov	r3, r1
 80064d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	32ae      	adds	r2, #174	; 0xae
 80064e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e01c      	b.n	800652a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d115      	bne.n	8006528 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	32ae      	adds	r2, #174	; 0xae
 8006506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00b      	beq.n	8006528 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	32ae      	adds	r2, #174	; 0xae
 800651a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	78fa      	ldrb	r2, [r7, #3]
 8006522:	4611      	mov	r1, r2
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	460b      	mov	r3, r1
 800653c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	32ae      	adds	r2, #174	; 0xae
 8006548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006550:	2303      	movs	r3, #3
 8006552:	e01c      	b.n	800658e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b03      	cmp	r3, #3
 800655e:	d115      	bne.n	800658c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	32ae      	adds	r2, #174	; 0xae
 800656a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	32ae      	adds	r2, #174	; 0xae
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	78fa      	ldrb	r2, [r7, #3]
 8006586:	4611      	mov	r1, r2
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00e      	beq.n	80065e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6852      	ldr	r2, [r2, #4]
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	4611      	mov	r1, r2
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80065e4:	2303      	movs	r3, #3
 80065e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	460b      	mov	r3, r1
 80065fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006618:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800663a:	2300      	movs	r3, #0
 800663c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	885b      	ldrh	r3, [r3, #2]
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	429a      	cmp	r2, r3
 800664c:	d920      	bls.n	8006690 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006656:	e013      	b.n	8006680 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006658:	f107 030a 	add.w	r3, r7, #10
 800665c:	4619      	mov	r1, r3
 800665e:	6978      	ldr	r0, [r7, #20]
 8006660:	f000 f81b 	bl	800669a <USBD_GetNextDesc>
 8006664:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	785b      	ldrb	r3, [r3, #1]
 800666a:	2b05      	cmp	r3, #5
 800666c:	d108      	bne.n	8006680 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	789b      	ldrb	r3, [r3, #2]
 8006676:	78fa      	ldrb	r2, [r7, #3]
 8006678:	429a      	cmp	r2, r3
 800667a:	d008      	beq.n	800668e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	885b      	ldrh	r3, [r3, #2]
 8006684:	b29a      	uxth	r2, r3
 8006686:	897b      	ldrh	r3, [r7, #10]
 8006688:	429a      	cmp	r2, r3
 800668a:	d8e5      	bhi.n	8006658 <USBD_GetEpDesc+0x32>
 800668c:	e000      	b.n	8006690 <USBD_GetEpDesc+0x6a>
          break;
 800668e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006690:	693b      	ldr	r3, [r7, #16]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	881a      	ldrh	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	4413      	add	r3, r2
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4413      	add	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80066c6:	68fb      	ldr	r3, [r7, #12]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	3301      	adds	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066f2:	8a3b      	ldrh	r3, [r7, #16]
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	b21a      	sxth	r2, r3
 80066f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	b21b      	sxth	r3, r3
 8006700:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006702:	89fb      	ldrh	r3, [r7, #14]
}
 8006704:	4618      	mov	r0, r3
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006726:	2b40      	cmp	r3, #64	; 0x40
 8006728:	d005      	beq.n	8006736 <USBD_StdDevReq+0x26>
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d857      	bhi.n	80067de <USBD_StdDevReq+0xce>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00f      	beq.n	8006752 <USBD_StdDevReq+0x42>
 8006732:	2b20      	cmp	r3, #32
 8006734:	d153      	bne.n	80067de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	32ae      	adds	r2, #174	; 0xae
 8006740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	4798      	blx	r3
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
      break;
 8006750:	e04a      	b.n	80067e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	785b      	ldrb	r3, [r3, #1]
 8006756:	2b09      	cmp	r3, #9
 8006758:	d83b      	bhi.n	80067d2 <USBD_StdDevReq+0xc2>
 800675a:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <USBD_StdDevReq+0x50>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	080067b5 	.word	0x080067b5
 8006764:	080067c9 	.word	0x080067c9
 8006768:	080067d3 	.word	0x080067d3
 800676c:	080067bf 	.word	0x080067bf
 8006770:	080067d3 	.word	0x080067d3
 8006774:	08006793 	.word	0x08006793
 8006778:	08006789 	.word	0x08006789
 800677c:	080067d3 	.word	0x080067d3
 8006780:	080067ab 	.word	0x080067ab
 8006784:	0800679d 	.word	0x0800679d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa3c 	bl	8006c08 <USBD_GetDescriptor>
          break;
 8006790:	e024      	b.n	80067dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fba1 	bl	8006edc <USBD_SetAddress>
          break;
 800679a:	e01f      	b.n	80067dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fbe0 	bl	8006f64 <USBD_SetConfig>
 80067a4:	4603      	mov	r3, r0
 80067a6:	73fb      	strb	r3, [r7, #15]
          break;
 80067a8:	e018      	b.n	80067dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fc83 	bl	80070b8 <USBD_GetConfig>
          break;
 80067b2:	e013      	b.n	80067dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fcb4 	bl	8007124 <USBD_GetStatus>
          break;
 80067bc:	e00e      	b.n	80067dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fce3 	bl	800718c <USBD_SetFeature>
          break;
 80067c6:	e009      	b.n	80067dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fd07 	bl	80071de <USBD_ClrFeature>
          break;
 80067d0:	e004      	b.n	80067dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fd5e 	bl	8007296 <USBD_CtlError>
          break;
 80067da:	bf00      	nop
      }
      break;
 80067dc:	e004      	b.n	80067e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fd58 	bl	8007296 <USBD_CtlError>
      break;
 80067e6:	bf00      	nop
  }

  return ret;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop

080067f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d005      	beq.n	800681a <USBD_StdItfReq+0x26>
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	d852      	bhi.n	80068b8 <USBD_StdItfReq+0xc4>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <USBD_StdItfReq+0x26>
 8006816:	2b20      	cmp	r3, #32
 8006818:	d14e      	bne.n	80068b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006820:	b2db      	uxtb	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	2b02      	cmp	r3, #2
 8006826:	d840      	bhi.n	80068aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	889b      	ldrh	r3, [r3, #4]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b01      	cmp	r3, #1
 8006830:	d836      	bhi.n	80068a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	889b      	ldrh	r3, [r3, #4]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff fed9 	bl	80065f2 <USBD_CoreFindIF>
 8006840:	4603      	mov	r3, r0
 8006842:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	2bff      	cmp	r3, #255	; 0xff
 8006848:	d01d      	beq.n	8006886 <USBD_StdItfReq+0x92>
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d11a      	bne.n	8006886 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006850:	7bba      	ldrb	r2, [r7, #14]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	32ae      	adds	r2, #174	; 0xae
 8006856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00f      	beq.n	8006880 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006860:	7bba      	ldrb	r2, [r7, #14]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006868:	7bba      	ldrb	r2, [r7, #14]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32ae      	adds	r2, #174	; 0xae
 800686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	4798      	blx	r3
 800687a:	4603      	mov	r3, r0
 800687c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800687e:	e004      	b.n	800688a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006880:	2303      	movs	r3, #3
 8006882:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006884:	e001      	b.n	800688a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006886:	2303      	movs	r3, #3
 8006888:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	88db      	ldrh	r3, [r3, #6]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d110      	bne.n	80068b4 <USBD_StdItfReq+0xc0>
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10d      	bne.n	80068b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fdc7 	bl	800742c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800689e:	e009      	b.n	80068b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fcf7 	bl	8007296 <USBD_CtlError>
          break;
 80068a8:	e004      	b.n	80068b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fcf2 	bl	8007296 <USBD_CtlError>
          break;
 80068b2:	e000      	b.n	80068b6 <USBD_StdItfReq+0xc2>
          break;
 80068b4:	bf00      	nop
      }
      break;
 80068b6:	e004      	b.n	80068c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fceb 	bl	8007296 <USBD_CtlError>
      break;
 80068c0:	bf00      	nop
  }

  return ret;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	889b      	ldrh	r3, [r3, #4]
 80068de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068e8:	2b40      	cmp	r3, #64	; 0x40
 80068ea:	d007      	beq.n	80068fc <USBD_StdEPReq+0x30>
 80068ec:	2b40      	cmp	r3, #64	; 0x40
 80068ee:	f200 817f 	bhi.w	8006bf0 <USBD_StdEPReq+0x324>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d02a      	beq.n	800694c <USBD_StdEPReq+0x80>
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	f040 817a 	bne.w	8006bf0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff fe83 	bl	800660c <USBD_CoreFindEP>
 8006906:	4603      	mov	r3, r0
 8006908:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800690a:	7b7b      	ldrb	r3, [r7, #13]
 800690c:	2bff      	cmp	r3, #255	; 0xff
 800690e:	f000 8174 	beq.w	8006bfa <USBD_StdEPReq+0x32e>
 8006912:	7b7b      	ldrb	r3, [r7, #13]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f040 8170 	bne.w	8006bfa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800691a:	7b7a      	ldrb	r2, [r7, #13]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006922:	7b7a      	ldrb	r2, [r7, #13]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	32ae      	adds	r2, #174	; 0xae
 8006928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 8163 	beq.w	8006bfa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006934:	7b7a      	ldrb	r2, [r7, #13]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	32ae      	adds	r2, #174	; 0xae
 800693a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
 8006946:	4603      	mov	r3, r0
 8006948:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800694a:	e156      	b.n	8006bfa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b03      	cmp	r3, #3
 8006952:	d008      	beq.n	8006966 <USBD_StdEPReq+0x9a>
 8006954:	2b03      	cmp	r3, #3
 8006956:	f300 8145 	bgt.w	8006be4 <USBD_StdEPReq+0x318>
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 809b 	beq.w	8006a96 <USBD_StdEPReq+0x1ca>
 8006960:	2b01      	cmp	r3, #1
 8006962:	d03c      	beq.n	80069de <USBD_StdEPReq+0x112>
 8006964:	e13e      	b.n	8006be4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d002      	beq.n	8006978 <USBD_StdEPReq+0xac>
 8006972:	2b03      	cmp	r3, #3
 8006974:	d016      	beq.n	80069a4 <USBD_StdEPReq+0xd8>
 8006976:	e02c      	b.n	80069d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00d      	beq.n	800699a <USBD_StdEPReq+0xce>
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b80      	cmp	r3, #128	; 0x80
 8006982:	d00a      	beq.n	800699a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 f983 	bl	8007c94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800698e:	2180      	movs	r1, #128	; 0x80
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 f97f 	bl	8007c94 <USBD_LL_StallEP>
 8006996:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006998:	e020      	b.n	80069dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fc7a 	bl	8007296 <USBD_CtlError>
              break;
 80069a2:	e01b      	b.n	80069dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	885b      	ldrh	r3, [r3, #2]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10e      	bne.n	80069ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <USBD_StdEPReq+0xfe>
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	2b80      	cmp	r3, #128	; 0x80
 80069b6:	d008      	beq.n	80069ca <USBD_StdEPReq+0xfe>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	88db      	ldrh	r3, [r3, #6]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 f965 	bl	8007c94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fd2e 	bl	800742c <USBD_CtlSendStatus>

              break;
 80069d0:	e004      	b.n	80069dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fc5e 	bl	8007296 <USBD_CtlError>
              break;
 80069da:	bf00      	nop
          }
          break;
 80069dc:	e107      	b.n	8006bee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d002      	beq.n	80069f0 <USBD_StdEPReq+0x124>
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d016      	beq.n	8006a1c <USBD_StdEPReq+0x150>
 80069ee:	e04b      	b.n	8006a88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00d      	beq.n	8006a12 <USBD_StdEPReq+0x146>
 80069f6:	7bbb      	ldrb	r3, [r7, #14]
 80069f8:	2b80      	cmp	r3, #128	; 0x80
 80069fa:	d00a      	beq.n	8006a12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 f947 	bl	8007c94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a06:	2180      	movs	r1, #128	; 0x80
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 f943 	bl	8007c94 <USBD_LL_StallEP>
 8006a0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a10:	e040      	b.n	8006a94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fc3e 	bl	8007296 <USBD_CtlError>
              break;
 8006a1a:	e03b      	b.n	8006a94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	885b      	ldrh	r3, [r3, #2]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d136      	bne.n	8006a92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 f94d 	bl	8007cd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fcf7 	bl	800742c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a3e:	7bbb      	ldrb	r3, [r7, #14]
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff fde2 	bl	800660c <USBD_CoreFindEP>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a4c:	7b7b      	ldrb	r3, [r7, #13]
 8006a4e:	2bff      	cmp	r3, #255	; 0xff
 8006a50:	d01f      	beq.n	8006a92 <USBD_StdEPReq+0x1c6>
 8006a52:	7b7b      	ldrb	r3, [r7, #13]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d11c      	bne.n	8006a92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006a58:	7b7a      	ldrb	r2, [r7, #13]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006a60:	7b7a      	ldrb	r2, [r7, #13]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	32ae      	adds	r2, #174	; 0xae
 8006a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d010      	beq.n	8006a92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a70:	7b7a      	ldrb	r2, [r7, #13]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	32ae      	adds	r2, #174	; 0xae
 8006a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a86:	e004      	b.n	8006a92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fc03 	bl	8007296 <USBD_CtlError>
              break;
 8006a90:	e000      	b.n	8006a94 <USBD_StdEPReq+0x1c8>
              break;
 8006a92:	bf00      	nop
          }
          break;
 8006a94:	e0ab      	b.n	8006bee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d002      	beq.n	8006aa8 <USBD_StdEPReq+0x1dc>
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d032      	beq.n	8006b0c <USBD_StdEPReq+0x240>
 8006aa6:	e097      	b.n	8006bd8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d007      	beq.n	8006abe <USBD_StdEPReq+0x1f2>
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b80      	cmp	r3, #128	; 0x80
 8006ab2:	d004      	beq.n	8006abe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fbed 	bl	8007296 <USBD_CtlError>
                break;
 8006abc:	e091      	b.n	8006be2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da0b      	bge.n	8006ade <USBD_StdEPReq+0x212>
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	3310      	adds	r3, #16
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	4413      	add	r3, r2
 8006ada:	3304      	adds	r3, #4
 8006adc:	e00b      	b.n	8006af6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	3304      	adds	r3, #4
 8006af6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2202      	movs	r2, #2
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fc37 	bl	8007378 <USBD_CtlSendData>
              break;
 8006b0a:	e06a      	b.n	8006be2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	da11      	bge.n	8006b38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b14:	7bbb      	ldrb	r3, [r7, #14]
 8006b16:	f003 020f 	and.w	r2, r3, #15
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	3324      	adds	r3, #36	; 0x24
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d117      	bne.n	8006b5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fbb0 	bl	8007296 <USBD_CtlError>
                  break;
 8006b36:	e054      	b.n	8006be2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	f003 020f 	and.w	r2, r3, #15
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	4613      	mov	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d104      	bne.n	8006b5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fb9d 	bl	8007296 <USBD_CtlError>
                  break;
 8006b5c:	e041      	b.n	8006be2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	da0b      	bge.n	8006b7e <USBD_StdEPReq+0x2b2>
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	3310      	adds	r3, #16
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	e00b      	b.n	8006b96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b7e:	7bbb      	ldrb	r3, [r7, #14]
 8006b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	4413      	add	r3, r2
 8006b94:	3304      	adds	r3, #4
 8006b96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <USBD_StdEPReq+0x2d8>
 8006b9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ba0:	2b80      	cmp	r3, #128	; 0x80
 8006ba2:	d103      	bne.n	8006bac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e00e      	b.n	8006bca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 f8ad 	bl	8007d10 <USBD_LL_IsStallEP>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e002      	b.n	8006bca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fbd1 	bl	8007378 <USBD_CtlSendData>
              break;
 8006bd6:	e004      	b.n	8006be2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fb5b 	bl	8007296 <USBD_CtlError>
              break;
 8006be0:	bf00      	nop
          }
          break;
 8006be2:	e004      	b.n	8006bee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fb55 	bl	8007296 <USBD_CtlError>
          break;
 8006bec:	bf00      	nop
      }
      break;
 8006bee:	e005      	b.n	8006bfc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fb4f 	bl	8007296 <USBD_CtlError>
      break;
 8006bf8:	e000      	b.n	8006bfc <USBD_StdEPReq+0x330>
      break;
 8006bfa:	bf00      	nop
  }

  return ret;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	885b      	ldrh	r3, [r3, #2]
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3b01      	subs	r3, #1
 8006c28:	2b06      	cmp	r3, #6
 8006c2a:	f200 8128 	bhi.w	8006e7e <USBD_GetDescriptor+0x276>
 8006c2e:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <USBD_GetDescriptor+0x2c>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c51 	.word	0x08006c51
 8006c38:	08006c69 	.word	0x08006c69
 8006c3c:	08006ca9 	.word	0x08006ca9
 8006c40:	08006e7f 	.word	0x08006e7f
 8006c44:	08006e7f 	.word	0x08006e7f
 8006c48:	08006e1f 	.word	0x08006e1f
 8006c4c:	08006e4b 	.word	0x08006e4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	7c12      	ldrb	r2, [r2, #16]
 8006c5c:	f107 0108 	add.w	r1, r7, #8
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	60f8      	str	r0, [r7, #12]
      break;
 8006c66:	e112      	b.n	8006e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	7c1b      	ldrb	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10d      	bne.n	8006c8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c78:	f107 0208 	add.w	r2, r7, #8
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	4798      	blx	r3
 8006c80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3301      	adds	r3, #1
 8006c86:	2202      	movs	r2, #2
 8006c88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c8a:	e100      	b.n	8006e8e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	f107 0208 	add.w	r2, r7, #8
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
 8006c9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	701a      	strb	r2, [r3, #0]
      break;
 8006ca6:	e0f2      	b.n	8006e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	885b      	ldrh	r3, [r3, #2]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b05      	cmp	r3, #5
 8006cb0:	f200 80ac 	bhi.w	8006e0c <USBD_GetDescriptor+0x204>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <USBD_GetDescriptor+0xb4>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006cd5 	.word	0x08006cd5
 8006cc0:	08006d09 	.word	0x08006d09
 8006cc4:	08006d3d 	.word	0x08006d3d
 8006cc8:	08006d71 	.word	0x08006d71
 8006ccc:	08006da5 	.word	0x08006da5
 8006cd0:	08006dd9 	.word	0x08006dd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	7c12      	ldrb	r2, [r2, #16]
 8006cec:	f107 0108 	add.w	r1, r7, #8
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4798      	blx	r3
 8006cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cf6:	e091      	b.n	8006e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 facb 	bl	8007296 <USBD_CtlError>
            err++;
 8006d00:	7afb      	ldrb	r3, [r7, #11]
 8006d02:	3301      	adds	r3, #1
 8006d04:	72fb      	strb	r3, [r7, #11]
          break;
 8006d06:	e089      	b.n	8006e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00b      	beq.n	8006d2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	7c12      	ldrb	r2, [r2, #16]
 8006d20:	f107 0108 	add.w	r1, r7, #8
 8006d24:	4610      	mov	r0, r2
 8006d26:	4798      	blx	r3
 8006d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d2a:	e077      	b.n	8006e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fab1 	bl	8007296 <USBD_CtlError>
            err++;
 8006d34:	7afb      	ldrb	r3, [r7, #11]
 8006d36:	3301      	adds	r3, #1
 8006d38:	72fb      	strb	r3, [r7, #11]
          break;
 8006d3a:	e06f      	b.n	8006e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	7c12      	ldrb	r2, [r2, #16]
 8006d54:	f107 0108 	add.w	r1, r7, #8
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4798      	blx	r3
 8006d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d5e:	e05d      	b.n	8006e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fa97 	bl	8007296 <USBD_CtlError>
            err++;
 8006d68:	7afb      	ldrb	r3, [r7, #11]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d6e:	e055      	b.n	8006e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00b      	beq.n	8006d94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	7c12      	ldrb	r2, [r2, #16]
 8006d88:	f107 0108 	add.w	r1, r7, #8
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4798      	blx	r3
 8006d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d92:	e043      	b.n	8006e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa7d 	bl	8007296 <USBD_CtlError>
            err++;
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	72fb      	strb	r3, [r7, #11]
          break;
 8006da2:	e03b      	b.n	8006e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	7c12      	ldrb	r2, [r2, #16]
 8006dbc:	f107 0108 	add.w	r1, r7, #8
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
 8006dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc6:	e029      	b.n	8006e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa63 	bl	8007296 <USBD_CtlError>
            err++;
 8006dd0:	7afb      	ldrb	r3, [r7, #11]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8006dd6:	e021      	b.n	8006e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	7c12      	ldrb	r2, [r2, #16]
 8006df0:	f107 0108 	add.w	r1, r7, #8
 8006df4:	4610      	mov	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dfa:	e00f      	b.n	8006e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa49 	bl	8007296 <USBD_CtlError>
            err++;
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	3301      	adds	r3, #1
 8006e08:	72fb      	strb	r3, [r7, #11]
          break;
 8006e0a:	e007      	b.n	8006e1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa41 	bl	8007296 <USBD_CtlError>
          err++;
 8006e14:	7afb      	ldrb	r3, [r7, #11]
 8006e16:	3301      	adds	r3, #1
 8006e18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e1a:	bf00      	nop
      }
      break;
 8006e1c:	e037      	b.n	8006e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7c1b      	ldrb	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d109      	bne.n	8006e3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2e:	f107 0208 	add.w	r2, r7, #8
 8006e32:	4610      	mov	r0, r2
 8006e34:	4798      	blx	r3
 8006e36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e38:	e029      	b.n	8006e8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fa2a 	bl	8007296 <USBD_CtlError>
        err++;
 8006e42:	7afb      	ldrb	r3, [r7, #11]
 8006e44:	3301      	adds	r3, #1
 8006e46:	72fb      	strb	r3, [r7, #11]
      break;
 8006e48:	e021      	b.n	8006e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7c1b      	ldrb	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10d      	bne.n	8006e6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	f107 0208 	add.w	r2, r7, #8
 8006e5e:	4610      	mov	r0, r2
 8006e60:	4798      	blx	r3
 8006e62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	2207      	movs	r2, #7
 8006e6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e6c:	e00f      	b.n	8006e8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fa10 	bl	8007296 <USBD_CtlError>
        err++;
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e7c:	e007      	b.n	8006e8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fa08 	bl	8007296 <USBD_CtlError>
      err++;
 8006e86:	7afb      	ldrb	r3, [r7, #11]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e8c:	bf00      	nop
  }

  if (err != 0U)
 8006e8e:	7afb      	ldrb	r3, [r7, #11]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d11e      	bne.n	8006ed2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	88db      	ldrh	r3, [r3, #6]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d016      	beq.n	8006eca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e9c:	893b      	ldrh	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00e      	beq.n	8006ec0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	88da      	ldrh	r2, [r3, #6]
 8006ea6:	893b      	ldrh	r3, [r7, #8]
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	bf28      	it	cs
 8006eac:	4613      	movcs	r3, r2
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006eb2:	893b      	ldrh	r3, [r7, #8]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	68f9      	ldr	r1, [r7, #12]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fa5d 	bl	8007378 <USBD_CtlSendData>
 8006ebe:	e009      	b.n	8006ed4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f9e7 	bl	8007296 <USBD_CtlError>
 8006ec8:	e004      	b.n	8006ed4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 faae 	bl	800742c <USBD_CtlSendStatus>
 8006ed0:	e000      	b.n	8006ed4 <USBD_GetDescriptor+0x2cc>
    return;
 8006ed2:	bf00      	nop
  }
}
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop

08006edc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	889b      	ldrh	r3, [r3, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d131      	bne.n	8006f52 <USBD_SetAddress+0x76>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	88db      	ldrh	r3, [r3, #6]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d12d      	bne.n	8006f52 <USBD_SetAddress+0x76>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	885b      	ldrh	r3, [r3, #2]
 8006efa:	2b7f      	cmp	r3, #127	; 0x7f
 8006efc:	d829      	bhi.n	8006f52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	885b      	ldrh	r3, [r3, #2]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d104      	bne.n	8006f20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f9bc 	bl	8007296 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1e:	e01d      	b.n	8006f5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	7bfa      	ldrb	r2, [r7, #15]
 8006f24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 ff1b 	bl	8007d68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa7a 	bl	800742c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d004      	beq.n	8006f48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2202      	movs	r2, #2
 8006f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f46:	e009      	b.n	8006f5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f50:	e004      	b.n	8006f5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f99e 	bl	8007296 <USBD_CtlError>
  }
}
 8006f5a:	bf00      	nop
 8006f5c:	bf00      	nop
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	885b      	ldrh	r3, [r3, #2]
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	4b4e      	ldr	r3, [pc, #312]	; (80070b4 <USBD_SetConfig+0x150>)
 8006f7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f7c:	4b4d      	ldr	r3, [pc, #308]	; (80070b4 <USBD_SetConfig+0x150>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d905      	bls.n	8006f90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f985 	bl	8007296 <USBD_CtlError>
    return USBD_FAIL;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e08c      	b.n	80070aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d002      	beq.n	8006fa2 <USBD_SetConfig+0x3e>
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d029      	beq.n	8006ff4 <USBD_SetConfig+0x90>
 8006fa0:	e075      	b.n	800708e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006fa2:	4b44      	ldr	r3, [pc, #272]	; (80070b4 <USBD_SetConfig+0x150>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d020      	beq.n	8006fec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006faa:	4b42      	ldr	r3, [pc, #264]	; (80070b4 <USBD_SetConfig+0x150>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fb4:	4b3f      	ldr	r3, [pc, #252]	; (80070b4 <USBD_SetConfig+0x150>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fe ffe7 	bl	8005f8e <USBD_SetClassConfig>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d008      	beq.n	8006fdc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f962 	bl	8007296 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fda:	e065      	b.n	80070a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fa25 	bl	800742c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2203      	movs	r2, #3
 8006fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006fea:	e05d      	b.n	80070a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fa1d 	bl	800742c <USBD_CtlSendStatus>
      break;
 8006ff2:	e059      	b.n	80070a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ff4:	4b2f      	ldr	r3, [pc, #188]	; (80070b4 <USBD_SetConfig+0x150>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d112      	bne.n	8007022 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007004:	4b2b      	ldr	r3, [pc, #172]	; (80070b4 <USBD_SetConfig+0x150>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800700e:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <USBD_SetConfig+0x150>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7fe ffd6 	bl	8005fc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa06 	bl	800742c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007020:	e042      	b.n	80070a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007022:	4b24      	ldr	r3, [pc, #144]	; (80070b4 <USBD_SetConfig+0x150>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	429a      	cmp	r2, r3
 800702e:	d02a      	beq.n	8007086 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fe ffc4 	bl	8005fc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800703e:	4b1d      	ldr	r3, [pc, #116]	; (80070b4 <USBD_SetConfig+0x150>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007048:	4b1a      	ldr	r3, [pc, #104]	; (80070b4 <USBD_SetConfig+0x150>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fe ff9d 	bl	8005f8e <USBD_SetClassConfig>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00f      	beq.n	800707e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f918 	bl	8007296 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fe ffa9 	bl	8005fc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800707c:	e014      	b.n	80070a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f9d4 	bl	800742c <USBD_CtlSendStatus>
      break;
 8007084:	e010      	b.n	80070a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f9d0 	bl	800742c <USBD_CtlSendStatus>
      break;
 800708c:	e00c      	b.n	80070a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f900 	bl	8007296 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007096:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <USBD_SetConfig+0x150>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7fe ff92 	bl	8005fc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80070a2:	2303      	movs	r3, #3
 80070a4:	73fb      	strb	r3, [r7, #15]
      break;
 80070a6:	bf00      	nop
  }

  return ret;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	200001b0 	.word	0x200001b0

080070b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	88db      	ldrh	r3, [r3, #6]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d004      	beq.n	80070d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f8e2 	bl	8007296 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070d2:	e023      	b.n	800711c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	dc02      	bgt.n	80070e6 <USBD_GetConfig+0x2e>
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	dc03      	bgt.n	80070ec <USBD_GetConfig+0x34>
 80070e4:	e015      	b.n	8007112 <USBD_GetConfig+0x5a>
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d00b      	beq.n	8007102 <USBD_GetConfig+0x4a>
 80070ea:	e012      	b.n	8007112 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	3308      	adds	r3, #8
 80070f6:	2201      	movs	r2, #1
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f93c 	bl	8007378 <USBD_CtlSendData>
        break;
 8007100:	e00c      	b.n	800711c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3304      	adds	r3, #4
 8007106:	2201      	movs	r2, #1
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f934 	bl	8007378 <USBD_CtlSendData>
        break;
 8007110:	e004      	b.n	800711c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f8be 	bl	8007296 <USBD_CtlError>
        break;
 800711a:	bf00      	nop
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007134:	b2db      	uxtb	r3, r3
 8007136:	3b01      	subs	r3, #1
 8007138:	2b02      	cmp	r3, #2
 800713a:	d81e      	bhi.n	800717a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	88db      	ldrh	r3, [r3, #6]
 8007140:	2b02      	cmp	r3, #2
 8007142:	d004      	beq.n	800714e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f8a5 	bl	8007296 <USBD_CtlError>
        break;
 800714c:	e01a      	b.n	8007184 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f043 0202 	orr.w	r2, r3, #2
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	330c      	adds	r3, #12
 800716e:	2202      	movs	r2, #2
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f900 	bl	8007378 <USBD_CtlSendData>
      break;
 8007178:	e004      	b.n	8007184 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f88a 	bl	8007296 <USBD_CtlError>
      break;
 8007182:	bf00      	nop
  }
}
 8007184:	bf00      	nop
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	885b      	ldrh	r3, [r3, #2]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d107      	bne.n	80071ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f940 	bl	800742c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80071ac:	e013      	b.n	80071d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	885b      	ldrh	r3, [r3, #2]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d10b      	bne.n	80071ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	889b      	ldrh	r3, [r3, #4]
 80071ba:	0a1b      	lsrs	r3, r3, #8
 80071bc:	b29b      	uxth	r3, r3
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f930 	bl	800742c <USBD_CtlSendStatus>
}
 80071cc:	e003      	b.n	80071d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f860 	bl	8007296 <USBD_CtlError>
}
 80071d6:	bf00      	nop
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d80b      	bhi.n	800720e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	885b      	ldrh	r3, [r3, #2]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d10c      	bne.n	8007218 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f910 	bl	800742c <USBD_CtlSendStatus>
      }
      break;
 800720c:	e004      	b.n	8007218 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f840 	bl	8007296 <USBD_CtlError>
      break;
 8007216:	e000      	b.n	800721a <USBD_ClrFeature+0x3c>
      break;
 8007218:	bf00      	nop
  }
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3301      	adds	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	781a      	ldrb	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff fa41 	bl	80066d4 <SWAPBYTE>
 8007252:	4603      	mov	r3, r0
 8007254:	461a      	mov	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3301      	adds	r3, #1
 800725e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f7ff fa34 	bl	80066d4 <SWAPBYTE>
 800726c:	4603      	mov	r3, r0
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3301      	adds	r3, #1
 800727e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f7ff fa27 	bl	80066d4 <SWAPBYTE>
 8007286:	4603      	mov	r3, r0
 8007288:	461a      	mov	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	80da      	strh	r2, [r3, #6]
}
 800728e:	bf00      	nop
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fcf6 	bl	8007c94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80072a8:	2100      	movs	r1, #0
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fcf2 	bl	8007c94 <USBD_LL_StallEP>
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d036      	beq.n	800733c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80072d2:	6938      	ldr	r0, [r7, #16]
 80072d4:	f000 f836 	bl	8007344 <USBD_GetLen>
 80072d8:	4603      	mov	r3, r0
 80072da:	3301      	adds	r3, #1
 80072dc:	b29b      	uxth	r3, r3
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	4413      	add	r3, r2
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	7812      	ldrb	r2, [r2, #0]
 80072f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	3301      	adds	r3, #1
 80072f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	4413      	add	r3, r2
 80072fe:	2203      	movs	r2, #3
 8007300:	701a      	strb	r2, [r3, #0]
  idx++;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	3301      	adds	r3, #1
 8007306:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007308:	e013      	b.n	8007332 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	4413      	add	r3, r2
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	7812      	ldrb	r2, [r2, #0]
 8007314:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	3301      	adds	r3, #1
 800731a:	613b      	str	r3, [r7, #16]
    idx++;
 800731c:	7dfb      	ldrb	r3, [r7, #23]
 800731e:	3301      	adds	r3, #1
 8007320:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	4413      	add	r3, r2
 8007328:	2200      	movs	r2, #0
 800732a:	701a      	strb	r2, [r3, #0]
    idx++;
 800732c:	7dfb      	ldrb	r3, [r7, #23]
 800732e:	3301      	adds	r3, #1
 8007330:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e7      	bne.n	800730a <USBD_GetString+0x52>
 800733a:	e000      	b.n	800733e <USBD_GetString+0x86>
    return;
 800733c:	bf00      	nop
  }
}
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007354:	e005      	b.n	8007362 <USBD_GetLen+0x1e>
  {
    len++;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	3301      	adds	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	3301      	adds	r3, #1
 8007360:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f5      	bne.n	8007356 <USBD_GetLen+0x12>
  }

  return len;
 800736a:	7bfb      	ldrb	r3, [r7, #15]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2202      	movs	r2, #2
 8007388:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	2100      	movs	r1, #0
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 fd01 	bl	8007da6 <USBD_LL_Transmit>

  return USBD_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	2100      	movs	r1, #0
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 fcf0 	bl	8007da6 <USBD_LL_Transmit>

  return USBD_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2203      	movs	r2, #3
 80073e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	2100      	movs	r1, #0
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fcf4 	bl	8007de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	2100      	movs	r1, #0
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fce3 	bl	8007de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2204      	movs	r2, #4
 8007438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800743c:	2300      	movs	r3, #0
 800743e:	2200      	movs	r2, #0
 8007440:	2100      	movs	r1, #0
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fcaf 	bl	8007da6 <USBD_LL_Transmit>

  return USBD_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2205      	movs	r2, #5
 800745e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007462:	2300      	movs	r3, #0
 8007464:	2200      	movs	r2, #0
 8007466:	2100      	movs	r1, #0
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fcbd 	bl	8007de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800747c:	2200      	movs	r2, #0
 800747e:	4912      	ldr	r1, [pc, #72]	; (80074c8 <MX_USB_DEVICE_Init+0x50>)
 8007480:	4812      	ldr	r0, [pc, #72]	; (80074cc <MX_USB_DEVICE_Init+0x54>)
 8007482:	f7fe fd07 	bl	8005e94 <USBD_Init>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800748c:	f7f9 fa08 	bl	80008a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007490:	490f      	ldr	r1, [pc, #60]	; (80074d0 <MX_USB_DEVICE_Init+0x58>)
 8007492:	480e      	ldr	r0, [pc, #56]	; (80074cc <MX_USB_DEVICE_Init+0x54>)
 8007494:	f7fe fd2e 	bl	8005ef4 <USBD_RegisterClass>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800749e:	f7f9 f9ff 	bl	80008a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074a2:	490c      	ldr	r1, [pc, #48]	; (80074d4 <MX_USB_DEVICE_Init+0x5c>)
 80074a4:	4809      	ldr	r0, [pc, #36]	; (80074cc <MX_USB_DEVICE_Init+0x54>)
 80074a6:	f7fe fc1f 	bl	8005ce8 <USBD_CDC_RegisterInterface>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80074b0:	f7f9 f9f6 	bl	80008a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074b4:	4805      	ldr	r0, [pc, #20]	; (80074cc <MX_USB_DEVICE_Init+0x54>)
 80074b6:	f7fe fd53 	bl	8005f60 <USBD_Start>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074c0:	f7f9 f9ee 	bl	80008a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074c4:	bf00      	nop
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	200000ac 	.word	0x200000ac
 80074cc:	200001b4 	.word	0x200001b4
 80074d0:	20000018 	.word	0x20000018
 80074d4:	20000098 	.word	0x20000098

080074d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074dc:	2200      	movs	r2, #0
 80074de:	4905      	ldr	r1, [pc, #20]	; (80074f4 <CDC_Init_FS+0x1c>)
 80074e0:	4805      	ldr	r0, [pc, #20]	; (80074f8 <CDC_Init_FS+0x20>)
 80074e2:	f7fe fc1b 	bl	8005d1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074e6:	4905      	ldr	r1, [pc, #20]	; (80074fc <CDC_Init_FS+0x24>)
 80074e8:	4803      	ldr	r0, [pc, #12]	; (80074f8 <CDC_Init_FS+0x20>)
 80074ea:	f7fe fc39 	bl	8005d60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000c90 	.word	0x20000c90
 80074f8:	200001b4 	.word	0x200001b4
 80074fc:	20000490 	.word	0x20000490

08007500 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007504:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007506:	4618      	mov	r0, r3
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	6039      	str	r1, [r7, #0]
 800751a:	71fb      	strb	r3, [r7, #7]
 800751c:	4613      	mov	r3, r2
 800751e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	2b23      	cmp	r3, #35	; 0x23
 8007524:	d84a      	bhi.n	80075bc <CDC_Control_FS+0xac>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <CDC_Control_FS+0x1c>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	080075bd 	.word	0x080075bd
 8007530:	080075bd 	.word	0x080075bd
 8007534:	080075bd 	.word	0x080075bd
 8007538:	080075bd 	.word	0x080075bd
 800753c:	080075bd 	.word	0x080075bd
 8007540:	080075bd 	.word	0x080075bd
 8007544:	080075bd 	.word	0x080075bd
 8007548:	080075bd 	.word	0x080075bd
 800754c:	080075bd 	.word	0x080075bd
 8007550:	080075bd 	.word	0x080075bd
 8007554:	080075bd 	.word	0x080075bd
 8007558:	080075bd 	.word	0x080075bd
 800755c:	080075bd 	.word	0x080075bd
 8007560:	080075bd 	.word	0x080075bd
 8007564:	080075bd 	.word	0x080075bd
 8007568:	080075bd 	.word	0x080075bd
 800756c:	080075bd 	.word	0x080075bd
 8007570:	080075bd 	.word	0x080075bd
 8007574:	080075bd 	.word	0x080075bd
 8007578:	080075bd 	.word	0x080075bd
 800757c:	080075bd 	.word	0x080075bd
 8007580:	080075bd 	.word	0x080075bd
 8007584:	080075bd 	.word	0x080075bd
 8007588:	080075bd 	.word	0x080075bd
 800758c:	080075bd 	.word	0x080075bd
 8007590:	080075bd 	.word	0x080075bd
 8007594:	080075bd 	.word	0x080075bd
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075bd 	.word	0x080075bd
 80075a0:	080075bd 	.word	0x080075bd
 80075a4:	080075bd 	.word	0x080075bd
 80075a8:	080075bd 	.word	0x080075bd
 80075ac:	080075bd 	.word	0x080075bd
 80075b0:	080075bd 	.word	0x080075bd
 80075b4:	080075bd 	.word	0x080075bd
 80075b8:	080075bd 	.word	0x080075bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075bc:	bf00      	nop
  }

  return (USBD_OK);
 80075be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	480f      	ldr	r0, [pc, #60]	; (8007618 <CDC_Receive_FS+0x4c>)
 80075da:	f7fe fbc1 	bl	8005d60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075de:	480e      	ldr	r0, [pc, #56]	; (8007618 <CDC_Receive_FS+0x4c>)
 80075e0:	f7fe fc22 	bl	8005e28 <USBD_CDC_ReceivePacket>

  memset(usb_in, '\0', 64); // clear buffer
 80075e4:	2240      	movs	r2, #64	; 0x40
 80075e6:	2100      	movs	r1, #0
 80075e8:	480c      	ldr	r0, [pc, #48]	; (800761c <CDC_Receive_FS+0x50>)
 80075ea:	f000 fca7 	bl	8007f3c <memset>
  uint8_t len = (uint8_t)*Len;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	73fb      	strb	r3, [r7, #15]
  memcpy(usb_in, Buf, len); // copy to buffer
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	4808      	ldr	r0, [pc, #32]	; (800761c <CDC_Receive_FS+0x50>)
 80075fc:	f000 fc90 	bl	8007f20 <memcpy>
  memset(Buf, '\0', len); // clear Buf
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	461a      	mov	r2, r3
 8007604:	2100      	movs	r1, #0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fc98 	bl	8007f3c <memset>

  return (USBD_OK);
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200001b4 	.word	0x200001b4
 800761c:	200001a8 	.word	0x200001a8

08007620 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	460b      	mov	r3, r1
 800762a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007630:	4b0d      	ldr	r3, [pc, #52]	; (8007668 <CDC_Transmit_FS+0x48>)
 8007632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007636:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007642:	2301      	movs	r3, #1
 8007644:	e00b      	b.n	800765e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007646:	887b      	ldrh	r3, [r7, #2]
 8007648:	461a      	mov	r2, r3
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4806      	ldr	r0, [pc, #24]	; (8007668 <CDC_Transmit_FS+0x48>)
 800764e:	f7fe fb65 	bl	8005d1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007652:	4805      	ldr	r0, [pc, #20]	; (8007668 <CDC_Transmit_FS+0x48>)
 8007654:	f7fe fba2 	bl	8005d9c <USBD_CDC_TransmitPacket>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	200001b4 	.word	0x200001b4

0800766c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4613      	mov	r3, r2
 8007678:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800767e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007682:	4618      	mov	r0, r3
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
	...

08007690 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	6039      	str	r1, [r7, #0]
 800769a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2212      	movs	r2, #18
 80076a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076a2:	4b03      	ldr	r3, [pc, #12]	; (80076b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	200000c8 	.word	0x200000c8

080076b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2204      	movs	r2, #4
 80076c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076c6:	4b03      	ldr	r3, [pc, #12]	; (80076d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	200000dc 	.word	0x200000dc

080076d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	6039      	str	r1, [r7, #0]
 80076e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d105      	bne.n	80076f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	4907      	ldr	r1, [pc, #28]	; (800770c <USBD_FS_ProductStrDescriptor+0x34>)
 80076ee:	4808      	ldr	r0, [pc, #32]	; (8007710 <USBD_FS_ProductStrDescriptor+0x38>)
 80076f0:	f7ff fde2 	bl	80072b8 <USBD_GetString>
 80076f4:	e004      	b.n	8007700 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	4904      	ldr	r1, [pc, #16]	; (800770c <USBD_FS_ProductStrDescriptor+0x34>)
 80076fa:	4805      	ldr	r0, [pc, #20]	; (8007710 <USBD_FS_ProductStrDescriptor+0x38>)
 80076fc:	f7ff fddc 	bl	80072b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007700:	4b02      	ldr	r3, [pc, #8]	; (800770c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20001490 	.word	0x20001490
 8007710:	08007f6c 	.word	0x08007f6c

08007714 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	6039      	str	r1, [r7, #0]
 800771e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	4904      	ldr	r1, [pc, #16]	; (8007734 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007724:	4804      	ldr	r0, [pc, #16]	; (8007738 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007726:	f7ff fdc7 	bl	80072b8 <USBD_GetString>
  return USBD_StrDesc;
 800772a:	4b02      	ldr	r3, [pc, #8]	; (8007734 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	20001490 	.word	0x20001490
 8007738:	08007f84 	.word	0x08007f84

0800773c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	4603      	mov	r3, r0
 8007744:	6039      	str	r1, [r7, #0]
 8007746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	221a      	movs	r2, #26
 800774c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800774e:	f000 f843 	bl	80077d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007752:	4b02      	ldr	r3, [pc, #8]	; (800775c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	200000e0 	.word	0x200000e0

08007760 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	6039      	str	r1, [r7, #0]
 800776a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800776c:	79fb      	ldrb	r3, [r7, #7]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d105      	bne.n	800777e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	4907      	ldr	r1, [pc, #28]	; (8007794 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007776:	4808      	ldr	r0, [pc, #32]	; (8007798 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007778:	f7ff fd9e 	bl	80072b8 <USBD_GetString>
 800777c:	e004      	b.n	8007788 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	4904      	ldr	r1, [pc, #16]	; (8007794 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007782:	4805      	ldr	r0, [pc, #20]	; (8007798 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007784:	f7ff fd98 	bl	80072b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007788:	4b02      	ldr	r3, [pc, #8]	; (8007794 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20001490 	.word	0x20001490
 8007798:	08007f98 	.word	0x08007f98

0800779c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4603      	mov	r3, r0
 80077a4:	6039      	str	r1, [r7, #0]
 80077a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d105      	bne.n	80077ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	4907      	ldr	r1, [pc, #28]	; (80077d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077b2:	4808      	ldr	r0, [pc, #32]	; (80077d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077b4:	f7ff fd80 	bl	80072b8 <USBD_GetString>
 80077b8:	e004      	b.n	80077c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	4904      	ldr	r1, [pc, #16]	; (80077d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077be:	4805      	ldr	r0, [pc, #20]	; (80077d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077c0:	f7ff fd7a 	bl	80072b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077c4:	4b02      	ldr	r3, [pc, #8]	; (80077d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20001490 	.word	0x20001490
 80077d4:	08007fa4 	.word	0x08007fa4

080077d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077de:	4b0f      	ldr	r3, [pc, #60]	; (800781c <Get_SerialNum+0x44>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077e4:	4b0e      	ldr	r3, [pc, #56]	; (8007820 <Get_SerialNum+0x48>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077ea:	4b0e      	ldr	r3, [pc, #56]	; (8007824 <Get_SerialNum+0x4c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4413      	add	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077fe:	2208      	movs	r2, #8
 8007800:	4909      	ldr	r1, [pc, #36]	; (8007828 <Get_SerialNum+0x50>)
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 f814 	bl	8007830 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007808:	2204      	movs	r2, #4
 800780a:	4908      	ldr	r1, [pc, #32]	; (800782c <Get_SerialNum+0x54>)
 800780c:	68b8      	ldr	r0, [r7, #8]
 800780e:	f000 f80f 	bl	8007830 <IntToUnicode>
  }
}
 8007812:	bf00      	nop
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	1fff7a10 	.word	0x1fff7a10
 8007820:	1fff7a14 	.word	0x1fff7a14
 8007824:	1fff7a18 	.word	0x1fff7a18
 8007828:	200000e2 	.word	0x200000e2
 800782c:	200000f2 	.word	0x200000f2

08007830 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007842:	2300      	movs	r3, #0
 8007844:	75fb      	strb	r3, [r7, #23]
 8007846:	e027      	b.n	8007898 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	0f1b      	lsrs	r3, r3, #28
 800784c:	2b09      	cmp	r3, #9
 800784e:	d80b      	bhi.n	8007868 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	0f1b      	lsrs	r3, r3, #28
 8007854:	b2da      	uxtb	r2, r3
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	4619      	mov	r1, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	440b      	add	r3, r1
 8007860:	3230      	adds	r2, #48	; 0x30
 8007862:	b2d2      	uxtb	r2, r2
 8007864:	701a      	strb	r2, [r3, #0]
 8007866:	e00a      	b.n	800787e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	0f1b      	lsrs	r3, r3, #28
 800786c:	b2da      	uxtb	r2, r3
 800786e:	7dfb      	ldrb	r3, [r7, #23]
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	4619      	mov	r1, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	440b      	add	r3, r1
 8007878:	3237      	adds	r2, #55	; 0x37
 800787a:	b2d2      	uxtb	r2, r2
 800787c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	3301      	adds	r3, #1
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4413      	add	r3, r2
 800788e:	2200      	movs	r2, #0
 8007890:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	3301      	adds	r3, #1
 8007896:	75fb      	strb	r3, [r7, #23]
 8007898:	7dfa      	ldrb	r2, [r7, #23]
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	429a      	cmp	r2, r3
 800789e:	d3d3      	bcc.n	8007848 <IntToUnicode+0x18>
  }
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	371c      	adds	r7, #28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
	...

080078b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	; 0x28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078b8:	f107 0314 	add.w	r3, r7, #20
 80078bc:	2200      	movs	r2, #0
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	605a      	str	r2, [r3, #4]
 80078c2:	609a      	str	r2, [r3, #8]
 80078c4:	60da      	str	r2, [r3, #12]
 80078c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078d0:	d13a      	bne.n	8007948 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078d2:	2300      	movs	r3, #0
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	4b1e      	ldr	r3, [pc, #120]	; (8007950 <HAL_PCD_MspInit+0xa0>)
 80078d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078da:	4a1d      	ldr	r2, [pc, #116]	; (8007950 <HAL_PCD_MspInit+0xa0>)
 80078dc:	f043 0301 	orr.w	r3, r3, #1
 80078e0:	6313      	str	r3, [r2, #48]	; 0x30
 80078e2:	4b1b      	ldr	r3, [pc, #108]	; (8007950 <HAL_PCD_MspInit+0xa0>)
 80078e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80078ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80078f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078f4:	2302      	movs	r3, #2
 80078f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f8:	2300      	movs	r3, #0
 80078fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078fc:	2303      	movs	r3, #3
 80078fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007900:	230a      	movs	r3, #10
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007904:	f107 0314 	add.w	r3, r7, #20
 8007908:	4619      	mov	r1, r3
 800790a:	4812      	ldr	r0, [pc, #72]	; (8007954 <HAL_PCD_MspInit+0xa4>)
 800790c:	f7fa f8e4 	bl	8001ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <HAL_PCD_MspInit+0xa0>)
 8007912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007914:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <HAL_PCD_MspInit+0xa0>)
 8007916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791a:	6353      	str	r3, [r2, #52]	; 0x34
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <HAL_PCD_MspInit+0xa0>)
 8007922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007924:	4a0a      	ldr	r2, [pc, #40]	; (8007950 <HAL_PCD_MspInit+0xa0>)
 8007926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800792a:	6453      	str	r3, [r2, #68]	; 0x44
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <HAL_PCD_MspInit+0xa0>)
 800792e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007938:	2200      	movs	r2, #0
 800793a:	2100      	movs	r1, #0
 800793c:	2043      	movs	r0, #67	; 0x43
 800793e:	f7fa f894 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007942:	2043      	movs	r0, #67	; 0x43
 8007944:	f7fa f8ad 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007948:	bf00      	nop
 800794a:	3728      	adds	r7, #40	; 0x28
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	40023800 	.word	0x40023800
 8007954:	40020000 	.word	0x40020000

08007958 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800796c:	4619      	mov	r1, r3
 800796e:	4610      	mov	r0, r2
 8007970:	f7fe fb43 	bl	8005ffa <USBD_LL_SetupStage>
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	4613      	mov	r3, r2
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	78fb      	ldrb	r3, [r7, #3]
 80079a4:	4619      	mov	r1, r3
 80079a6:	f7fe fb7d 	bl	80060a4 <USBD_LL_DataOutStage>
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	460b      	mov	r3, r1
 80079bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80079c4:	78fa      	ldrb	r2, [r7, #3]
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	4413      	add	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	440b      	add	r3, r1
 80079d2:	334c      	adds	r3, #76	; 0x4c
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	4619      	mov	r1, r3
 80079da:	f7fe fc16 	bl	800620a <USBD_LL_DataInStage>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe fd4a 	bl	800648e <USBD_LL_SOF>
}
 80079fa:	bf00      	nop
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d102      	bne.n	8007a1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]
 8007a1a:	e008      	b.n	8007a2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d102      	bne.n	8007a2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]
 8007a28:	e001      	b.n	8007a2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a2a:	f7f8 ff39 	bl	80008a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a34:	7bfa      	ldrb	r2, [r7, #15]
 8007a36:	4611      	mov	r1, r2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe fcea 	bl	8006412 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe fc92 	bl	800636e <USBD_LL_Reset>
}
 8007a4a:	bf00      	nop
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fce5 	bl	8006432 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6812      	ldr	r2, [r2, #0]
 8007a76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a7a:	f043 0301 	orr.w	r3, r3, #1
 8007a7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d005      	beq.n	8007a94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a88:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <HAL_PCD_SuspendCallback+0x48>)
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	4a03      	ldr	r2, [pc, #12]	; (8007a9c <HAL_PCD_SuspendCallback+0x48>)
 8007a8e:	f043 0306 	orr.w	r3, r3, #6
 8007a92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	e000ed00 	.word	0xe000ed00

08007aa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fcd5 	bl	800645e <USBD_LL_Resume>
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ace:	78fa      	ldrb	r2, [r7, #3]
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fe fd2d 	bl	8006532 <USBD_LL_IsoOUTIncomplete>
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fce9 	bl	80064ce <USBD_LL_IsoINIncomplete>
}
 8007afc:	bf00      	nop
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fd3f 	bl	8006596 <USBD_LL_DevConnected>
}
 8007b18:	bf00      	nop
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fe fd3c 	bl	80065ac <USBD_LL_DevDisconnected>
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d13c      	bne.n	8007bc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b4c:	4a20      	ldr	r2, [pc, #128]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a1e      	ldr	r2, [pc, #120]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b58:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b5c:	4b1c      	ldr	r3, [pc, #112]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b64:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b66:	2204      	movs	r2, #4
 8007b68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b6a:	4b19      	ldr	r3, [pc, #100]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b70:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b76:	4b16      	ldr	r3, [pc, #88]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b78:	2202      	movs	r2, #2
 8007b7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b7c:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b82:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b88:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b8e:	4b10      	ldr	r3, [pc, #64]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b94:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b9a:	480d      	ldr	r0, [pc, #52]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007b9c:	f7fa f96b 	bl	8001e76 <HAL_PCD_Init>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ba6:	f7f8 fe7b 	bl	80008a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007baa:	2180      	movs	r1, #128	; 0x80
 8007bac:	4808      	ldr	r0, [pc, #32]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007bae:	f7fb fbc2 	bl	8003336 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bb2:	2240      	movs	r2, #64	; 0x40
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4806      	ldr	r0, [pc, #24]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007bb8:	f7fb fb76 	bl	80032a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bbc:	2280      	movs	r2, #128	; 0x80
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4803      	ldr	r0, [pc, #12]	; (8007bd0 <USBD_LL_Init+0x94>)
 8007bc2:	f7fb fb71 	bl	80032a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20001690 	.word	0x20001690

08007bd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fa fa60 	bl	80020b0 <HAL_PCD_Start>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f942 	bl	8007e80 <USBD_Get_USB_Status>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	4608      	mov	r0, r1
 8007c14:	4611      	mov	r1, r2
 8007c16:	461a      	mov	r2, r3
 8007c18:	4603      	mov	r3, r0
 8007c1a:	70fb      	strb	r3, [r7, #3]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70bb      	strb	r3, [r7, #2]
 8007c20:	4613      	mov	r3, r2
 8007c22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c32:	78bb      	ldrb	r3, [r7, #2]
 8007c34:	883a      	ldrh	r2, [r7, #0]
 8007c36:	78f9      	ldrb	r1, [r7, #3]
 8007c38:	f7fa ff31 	bl	8002a9e <HAL_PCD_EP_Open>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 f91c 	bl	8007e80 <USBD_Get_USB_Status>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c70:	78fa      	ldrb	r2, [r7, #3]
 8007c72:	4611      	mov	r1, r2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fa ff7a 	bl	8002b6e <HAL_PCD_EP_Close>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 f8fd 	bl	8007e80 <USBD_Get_USB_Status>
 8007c86:	4603      	mov	r3, r0
 8007c88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fb f852 	bl	8002d5c <HAL_PCD_EP_SetStall>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 f8de 	bl	8007e80 <USBD_Get_USB_Status>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cec:	78fa      	ldrb	r2, [r7, #3]
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fb f897 	bl	8002e24 <HAL_PCD_EP_ClrStall>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 f8bf 	bl	8007e80 <USBD_Get_USB_Status>
 8007d02:	4603      	mov	r3, r0
 8007d04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	da0b      	bge.n	8007d44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	4613      	mov	r3, r2
 8007d36:	00db      	lsls	r3, r3, #3
 8007d38:	4413      	add	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	333e      	adds	r3, #62	; 0x3e
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	e00b      	b.n	8007d5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d4a:	68f9      	ldr	r1, [r7, #12]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007d5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d82:	78fa      	ldrb	r2, [r7, #3]
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fa fe64 	bl	8002a54 <HAL_PCD_SetAddress>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 f874 	bl	8007e80 <USBD_Get_USB_Status>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b086      	sub	sp, #24
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	460b      	mov	r3, r1
 8007db4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007dc4:	7af9      	ldrb	r1, [r7, #11]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	f7fa ff7d 	bl	8002cc8 <HAL_PCD_EP_Transmit>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 f853 	bl	8007e80 <USBD_Get_USB_Status>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dde:	7dbb      	ldrb	r3, [r7, #22]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	607a      	str	r2, [r7, #4]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	460b      	mov	r3, r1
 8007df6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e06:	7af9      	ldrb	r1, [r7, #11]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	f7fa fef9 	bl	8002c02 <HAL_PCD_EP_Receive>
 8007e10:	4603      	mov	r3, r0
 8007e12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 f832 	bl	8007e80 <USBD_Get_USB_Status>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e20:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e3c:	78fa      	ldrb	r2, [r7, #3]
 8007e3e:	4611      	mov	r1, r2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fa ff29 	bl	8002c98 <HAL_PCD_EP_GetRxCount>
 8007e46:	4603      	mov	r3, r0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e58:	4b03      	ldr	r3, [pc, #12]	; (8007e68 <USBD_static_malloc+0x18>)
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	20001b9c 	.word	0x20001b9c

08007e6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]

}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d817      	bhi.n	8007ec4 <USBD_Get_USB_Status+0x44>
 8007e94:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <USBD_Get_USB_Status+0x1c>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ead 	.word	0x08007ead
 8007ea0:	08007eb3 	.word	0x08007eb3
 8007ea4:	08007eb9 	.word	0x08007eb9
 8007ea8:	08007ebf 	.word	0x08007ebf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb0:	e00b      	b.n	8007eca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb6:	e008      	b.n	8007eca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	73fb      	strb	r3, [r7, #15]
    break;
 8007ebc:	e005      	b.n	8007eca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec2:	e002      	b.n	8007eca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec8:	bf00      	nop
  }
  return usb_status;
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <__libc_init_array>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	4d0d      	ldr	r5, [pc, #52]	; (8007f10 <__libc_init_array+0x38>)
 8007edc:	4c0d      	ldr	r4, [pc, #52]	; (8007f14 <__libc_init_array+0x3c>)
 8007ede:	1b64      	subs	r4, r4, r5
 8007ee0:	10a4      	asrs	r4, r4, #2
 8007ee2:	2600      	movs	r6, #0
 8007ee4:	42a6      	cmp	r6, r4
 8007ee6:	d109      	bne.n	8007efc <__libc_init_array+0x24>
 8007ee8:	4d0b      	ldr	r5, [pc, #44]	; (8007f18 <__libc_init_array+0x40>)
 8007eea:	4c0c      	ldr	r4, [pc, #48]	; (8007f1c <__libc_init_array+0x44>)
 8007eec:	f000 f82e 	bl	8007f4c <_init>
 8007ef0:	1b64      	subs	r4, r4, r5
 8007ef2:	10a4      	asrs	r4, r4, #2
 8007ef4:	2600      	movs	r6, #0
 8007ef6:	42a6      	cmp	r6, r4
 8007ef8:	d105      	bne.n	8007f06 <__libc_init_array+0x2e>
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f00:	4798      	blx	r3
 8007f02:	3601      	adds	r6, #1
 8007f04:	e7ee      	b.n	8007ee4 <__libc_init_array+0xc>
 8007f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f0a:	4798      	blx	r3
 8007f0c:	3601      	adds	r6, #1
 8007f0e:	e7f2      	b.n	8007ef6 <__libc_init_array+0x1e>
 8007f10:	08007fcc 	.word	0x08007fcc
 8007f14:	08007fcc 	.word	0x08007fcc
 8007f18:	08007fcc 	.word	0x08007fcc
 8007f1c:	08007fd0 	.word	0x08007fd0

08007f20 <memcpy>:
 8007f20:	440a      	add	r2, r1
 8007f22:	4291      	cmp	r1, r2
 8007f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f28:	d100      	bne.n	8007f2c <memcpy+0xc>
 8007f2a:	4770      	bx	lr
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f36:	4291      	cmp	r1, r2
 8007f38:	d1f9      	bne.n	8007f2e <memcpy+0xe>
 8007f3a:	bd10      	pop	{r4, pc}

08007f3c <memset>:
 8007f3c:	4402      	add	r2, r0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d100      	bne.n	8007f46 <memset+0xa>
 8007f44:	4770      	bx	lr
 8007f46:	f803 1b01 	strb.w	r1, [r3], #1
 8007f4a:	e7f9      	b.n	8007f40 <memset+0x4>

08007f4c <_init>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	bf00      	nop
 8007f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	469e      	mov	lr, r3
 8007f56:	4770      	bx	lr

08007f58 <_fini>:
 8007f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5a:	bf00      	nop
 8007f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5e:	bc08      	pop	{r3}
 8007f60:	469e      	mov	lr, r3
 8007f62:	4770      	bx	lr
